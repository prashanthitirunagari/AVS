'################################################################################################################
'	LIBRARY NAME		: LibAccidentsViolationsGeneric
'
'	DESCRIPTION			: This library contains AccidentsViolations related generic funtions.
'
'	INCLUDED FUNCTIONS	:
'		Public Function IntializeAVSVariables()
'		Public Function ImportDataRequestSheet()
'		Public Function AV_SetupRepView()
'		Public Function AV_NavigateToAmendments(ByVal EffectiveDateOption)
'    	Public Function AV_DataAssignedToDic(ByVal Cnt, ByVal SheetName)
'		Public Function AV_EndSession()
'		Public Function AV_SearchClient(ByVal dictmpDriverRecord, ByVal SearchBy, ByVal AddNew)
'		Public Function AV_SelectPolicy (ByVal PolicyNum, ByVal ExpPolicyStatus)
'		Public Function AV_EnterEffectiveDate(ByVal ScreenObject, ByVal TaskLinkName, ByVal StartDate, ByVal AddDays)
'		Public Function AV_FullStateName(ByVal StateAbbrevationCode)
'		Public Function AV_AddDriver(ByVal TableName, ByVal RowID)
'		Public Function AV_AddPersonalClientInfo(ByVal TableName, ByVal RowID)
'		Public Function AV_ReservePoliciesAndFetchDriverName()
'		Public Function AV_GetTestScriptRow(ByVal SheetName)
'		Public Function AV_UpdateDriver(ByVal TableName, ByVal RowID)
'		Public Function getFinalDriverPoints(ByVal strTotal,ByVal PointsType)
'		Public Function AV_AddOrSubtractTED(ByVal TEDString,ByVal TED)
'		Public Function AV_VerificationAfterRenewal()
'		Public Function AV_VerifySourcePoints(ByVal Cnt)
'		Public Function AV_AddAccidentOrViolation()
'		Public Function AV_TestDataCreation()
'		Public Function AV_FetchDriverDetailsFromDB2(ByVal PolicyNumber, ByVal  DFirstName,ByVal DLastName)
'		Public Function GetLicenceStatusCode(ByVal LicenseStatus)
'		Public Function InitializeMVRToolVariables()
'		Public Function UpdateMVRData(ByVal dicColMVR,ByVal dicValuesMVR)
'		Public Function CloseExcel(ByVal FileName)
'		Public  Function  OpenExcelSheet(ByVal EXcelFilePath,Byval EXcelSheetName)
'		Public Function  PrepareMVRData()
'		Public Function AV_ReservePolicies()
'		Public Function AV_FGPreReqDatesVerification( )
'		Public Function ConnectToDB2()
'       Public Function AV_FetchDriverRecordPointsFromDB2()
'      Public Function AV_ReleasePolicies()
'		Public  Function GetIncidentCode(ByVal IncidentCode)
'		Public Function AV_ValidateAddUpdateDriverInfo(ByVal DriverTableName, ByVal DriverRowID, ByVal LicenseTableName, ByVal LicenseRowID, ByVal AddressTableName, 
'		Public Function AV_Ammendments(ByVal SheetName)
'		Public Function AV_VerifySourcePointsFromDB2(ByVal Cnt,ByVal PLCSFlag)
'################################################################################################################

Option Explicit

'################################################################################################################
'							P U B L I C   V A R I A B L E   D E C L A R A T I O N
'################################################################################################################
Public gbTermDate, gbDBUserName, gbDBUserPassword, gbExpErrorMessage, gbPolicyNum, gbdicAVtmpObject,  gbPolicyCnt,  gbPolicyAssignment,gbNewTermDate
Public gbApplicableScript, gbDriverName, gbDriverFName,gbDriverLName,gbdicAccViolDescObject,dicCliamPoints,gbMVRLastName,gbLicenseNumber,gbDB2ConnectionSring,gbDB2Env
Public gbTestLabName, gbTestCaseType,gbDriverFirstName,gbDriverLastName, gbExecutionFlow, gbSimpleExecutionFlow, gbComplexExecutionFlow, MVRUpdateFlag
Public gbSimpleSourceFlag,gbMVRFlag,gbClaimsOrPLCSFlag,gbLossDate,gbLossNumber,gbClaimsLossNumber,gbPLCSLossNumber, gbTED


'MVR data variables.
Public gbTEDate,gbCountValue,gbTemp
Public dicValuesMVR,dicColMVR
Public  objExcel,objWorkbook,objWorksheet
Public AV_Connection

'################################################################################################################
'							P R I V A T E   V A R I A B L E   D E C L A R A T I O N
'################################################################################################################


'################################################################################################################
'									P U B L I C   F U N C T I O N S
'################################################################################################################
'		Assigning Global Variables

'################################################################################################################################
'	FUNCTION NAME		: ImportDataRequestSheet()
'
'	DESCRIPTION			: Imports the AVS Testware workbook
'
'	PARAMETERS			: (None)
'			
'	DEPENDENCIES		: (None)
'    
' 	RETURN VALUE(S)		: (None)
'
'	ERRORS				: (None)
'
'	AUTHOR				: Prashanthi Nandagiri
'
'	ORIGINAL DATE		: SEP 15 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'	
'
'################################################################################################################################
Public Function ImportDataRequestSheet()
	Dim SourceFileName, SourceSheetNames,Element
	On Error Resume Next

    SourceFileName = gbServerPath & "Applications\" & gbApplicationName & "\Testware\" & "AVSTestware.xls"
    SourceSheetNames = Array("Rating Hierarchy","PLCS","Z4AV","Forgiveness","PLCS Dup Same Day Test Data","PLCS Dup Diff Day Test Data","ViolationCodes","SimpleScenario","ComplexScenario")

	For each Element in SourceSheetNames
		Datatable.AddSheet Element
		Datatable.ImportSheet SourceFileName, Element, Element

		'Error Handling
		If Err.Number <> micPass Then
			gbErrDescription = "Unable to import sheet [" & Element & "]" & vbCrLf & " from file [" & SourceFileName & "]"
			ImportDataRequestSheet = micFail
            Exit Function
		End If
	Next

	ImportDataRequestSheet = micPass
End Function
'###############################################################################################################################
'	FUNCTION NAME		: CheckAccidentsViolationsStatus()
'
'	DESCRIPTION			:  This function Checks for unexpected popups and application down time
'
'	PARAMETERS			: (None)
'			
'	DEPENDENCIES		: (None)
'    
' 	RETURN VALUE(S)		: (None)
'
'	ERRORS				: (None)
'
'	AUTHOR				: Prashanthi Nandagiri
'
'	ORIGINAL DATE		: Sep 15 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'	
'
'################################################################################################################################
Public Function CheckAccidentsViolationsStatus()
    Dim rc

	rc = CheckRepViewStatus()
	
	CheckAccidentsViolationsStatus = rc
End Function

'################################################################################################################################
'	FUNCTION NAME		: AV_SetupRepView()
'
'	DESCRIPTION			: Login to the application 
'
'	PARAMETERS			: (None)
'			
'	DEPENDENCIES		: (None)
'    
' 	RETURN VALUE(S)		: (None)
'
'	ERRORS				: (None)
'
'	AUTHOR				: Prashanthi Nandagiri
'
'	ORIGINAL DATE		: Sep 15 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'	
'
'################################################################################################################################
Public Function AV_SetupRepView()
	Dim rc
	On Error Resume Next
	rc = ReportStep(1,"Login to RepView","","")
    'If rc=micPass Then rc = SetupRepView()

	
	'IntializeRepViewAndAVSVariables
	
    'Close Browsers
	CloseBrowsers
	
	'Error handling taken care at called function
	If rc=micPass Then rc=InvokeRepView(gbAppRegion)
	
	'Error handling taken care at called function
	If rc = micPass Then rc = RepViewLogin("")
	
	If rc=micPass Then rc = TakeCall()
	If rc=micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"IdentifyClient","")
	If rc=micPass Then rc = WaitForObject(frIdentifyClient.WebElement("Search"))
	
	AV_SetupRepView = rc
End Function

'################################################################################################################################
'	FUNCTION NAME		: AV_NavigateToAmendments()
'
'	DESCRIPTION			: Navigates till Ammendments page
'
'	PARAMETERS			: (None)
'			
'	DEPENDENCIES		: (None)
'    
' 	RETURN VALUE(S)		: (None)
'
'	ERRORS				: (None)
'
'	AUTHOR				: Prashanthi Nandagiri
'
'	ORIGINAL DATE		: Sep 17 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'	
'
'################################################################################################################################
Public Function AV_NavigateToAmendments(ByVal EffectiveDateOption)
	Dim rc
	On Error Resume Next
	
	rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"IdentifyClient","")
	If rc=micPass Then rc = WaitForObject(frIdentifyClient.WebElement("Search"))
	If rc=micPass Then rc = AV_SearchClient("","Policy","No")
	If rc=micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"PolicyQuoteSummary","")
	If rc=micPass Then rc = WaitForObject(frPolicyQuoteSummary.WebElement("Complete"))
	If rc=micPass Then rc = AV_SelectPolicy(gbPolicyNum,"")
	If rc=micPass Then rc = SelectTask("PolicyQuoteSummary","Amendments")
	If rc=micPass Then rc = WaitForwindow(gbBrowserName,gbApplicationHomePage,"PolicyAmendment","")
	If rc=micPass Then rc = WaitForObject(frPolicyAmendment.WebElement("Retrieve Policy"))
	If rc=micPass Then rc = SelectTask("PolicyAmendment","Retrieve Policy")
	If rc=micPass Then rc = AV_EnterEffectiveDate(frPolicyAmendment, "Retrieve Policy", EffectiveDateOption, 0)
    
	'gbdicMiscellaneous("RetrievedDate")
	'If rc=micPass Then rc = WaitForObject(frPolicyAmendment.WebElement("Retrieve Policy"))
	If rc=micPass Then rc = VerifyTaskStatus("PolicyAmendment","Change Effective Date","Enabled","Single","")

	If rc=micPass Then rc = GetframeData(frPolicyAmendment,"Term Date","Policy Status")
	'Storing the Term date in to gbTermDate
	gbTermDate= gbReturnValue
	gbTED= gbReturnValue

	'Verify gbTermdate is more than 3 years from system date.
	 If InStr(1,gbCurrTestCaseName,"AG") = 0  and IsDate(gbTermDate) Then
        If  DateDiff("yyyy", date, gbTermDate)>=3 Then
				rc=micFail
				HandleRC rc
				ReportStep 2, "Term Effective Date", "The Term Effective date should be less than 3 years for non Aging conditions.", "The Term Effective Date is more than or equal to 3 years"
			   AV_NavigateToAmendments=rc
				Exit Function
		End If
	End If	

	If rc=micPass Then rc = SelectRepviewTab("PolicyQuoteSummary Tabs",  "Driver")
	If rc=micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"DriverPage","")
	If rc=micPass Then rc = WaitForObject(frDriverPage.WebElement("Add New Driver"))

	AV_NavigateToAmendments = rc
End Function

'################################################################################################################################
'	FUNCTION NAME		: AV_DataAssignedToDic(ByVal SheetName, ByVal Counter)
'
'	DESCRIPTION			: This function will assign all the attribute values to the dictionary object
'
'	PARAMETERS			: 
'		SheetName					:	 Name of sheet which TestcaseID refers
'		Counter							:	 	Counter refers to number of Accidents/Violations that need to be added
'					
'	DEPENDENCIES		: (None)
'
' 	RETURN VALUE(S): 
'		micPass	 		: On successful execution of the function
'		micFail	 		: On unsuccessful execution of the function
'
'	ERRORS				: (None)
'
'	AUTHOR				: Prashanthi Nandagiri
'
'	ORIGINAL DATE		: Sep 17 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY			:	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
' 
' 
' 
'
'################################################################################################################################
Public Function AV_DataAssignedToDic( ByVal SheetName, ByVal Counter)

	Dim rc, AttrColCnt, DriverColValue, NoOfColumns, Cnt, ColumnName
	
	On Error Resume Next
	
	'Set dicRRtmpObject = CreateObject("Scripting.Dictionary")
	AttrColCnt = DataTable.GetSheet(SheetName).GetParameterCount 
	
	'Datatable.GetSheet(SheetName).SetCurrentRow AV_GetTestScriptRow(SheetName)
	rc = AV_GetTestScriptRow(SheetName)
	
	If rc <> -1  Then
		Datatable.GetSheet(SheetName).SetCurrentRow rc
		rc = micPass
	Else
		Handlerc micFail
		ReportMessage 2, "Test case search", "Test case " & gbCurrTestCaseName & " not found in sheet 'TestScript'"
		AV_DataAssignedToDic = micFail
		Exit Function
	End If

		For Cnt =1 to Counter
			If Cnt=1  Then
				For NoOfColumns = 1 to 5 
						DriverColValue=Datatable.GetSheet(SheetName).GetParameter(NoOfColumns).Name
						gbdicAVtmpObject(DriverColValue) = Datatable.GetSheet(SheetName).GetParameter(NoOfColumns).Value
				Next
				For NoOfColumns = 6 to AttrColCnt 
						DriverColValue=Datatable.GetSheet(SheetName).GetParameter(NoOfColumns).Name
						gbdicAVtmpObject(DriverColValue&"_"&Cnt) = Datatable.GetSheet(SheetName).GetParameter(NoOfColumns).Value
				Next
			Else
			  'Assigning the values to the dictionary object
				For NoOfColumns = 6 to AttrColCnt 
					DriverColValue=Datatable.GetSheet(SheetName).GetParameter(NoOfColumns).Name
					gbdicAVtmpObject(DriverColValue&"_"&Cnt) = Datatable.GetSheet(SheetName).GetParameter(NoOfColumns).Value
				Next
			End If
		
			DataTable.GetSheet(SheetName).SetNextRow()
		Next

    If  gbdicAVtmpObject.count >0 Then
		AV_DataAssignedToDic = micPass
	Else
        HandleRC micFail
		AV_DataAssignedToDic = micFail
		ReportStep 2, "Testware Issue",  "AVSTestData sheet doesn't contain any attributes [i.e Columns]",""
		EndTestCaseReport
		Exit Function
	End If

End Function
'################################################################################################################################
'	FUNCTION NAME		: AV_SearchClient(ByVal dictmpDriverRecord, ByVal SearchBy, ByVal AddNew)
'
'	DESCRIPTION			: Client search based on name and add new client or select existing
'
'	PARAMETERS			: 
'		dictmpDriverRecord				:	 Dictionary Object which contains all the attribute values for FirstName and LastName
' 		SearchBy									:   Search based on "Policy" or "Name" options
'		AddNew				: Determines whether to add a new client or to select existing
'							  			Valid values are Yes, NoSearchBy	   
'					
'	DEPENDENCIES		: (None)
'
' 	RETURN VALUE(S): 
'		micPass	 		: On successful execution of the function
'		micFail	 		: On unsuccessful execution of the function
'
'	ERRORS				: (None)
'
'	AUTHOR				: Prashanthi Nandagiri
'
'	ORIGINAL DATE		: May 27 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY			:	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'  
' 
'
'################################################################################################################################
Public Function AV_SearchClient(ByVal dictmpDriverRecord, ByVal SearchBy, ByVal AddNew)
	Dim rc, AddNewPopUpAppeared, Flag
	
	On Error Resume Next
	
	AddNewPopUpAppeared=False
	
	'Wait for the Screen to load, some times the page refreshes so we need to check for two objects
	rc = WaitForObject(frIdentifyClient.WebElement("Search"))
	If rc=micPass Then rc = WaitForObject(frIdentifyClient.WebButton("OK"))
	pgChordiantHome.Sync
	
	'Error handling
	If rc <> micPass Then
		HandleRC rc
		AV_SearchClient = rc
		ReportStep 2, "Client Search", "Search for client details using " & SearchBy, "Client search Screen not loaded"
		Exit Function
	End If
	
    'Enter Search criteria
	Select Case SearchBy
		Case "Policy"
			'Enter policy number
			rc = ObjectEdit (frIdentifyClient, "Policy/Quote Number", "EnterValue", "", "", "",gbPolicyNum)
			frIdentifyClient.WebEdit("Policy/Quote Number").FireEvent "onKeyUp"
			'Error handling
			If rc <> micPass Then
				HandleRC rc
				AV_SearchClient = rc
				ReportStep 2, "Client Search", "Search for client details using " & SearchBy, "Unable to enter Policy number"
				Exit Function
			End If

		Case "Name"
			'Enter Last name
			rc = ObjectEdit (frIdentifyClient, "Last Name", "EnterValue", "", "", "",dictmpDriverRecord("LastName"))
			frIdentifyClient.WebEdit("Last Name").FireEvent "onKeyUp"
			'Enter First Name
            If rc = micPass Then rc = ObjectEdit (frIdentifyClient, "First Name", "EnterValue", "", "", "",dictmpDriverRecord("FirstName"))
			ReportStep 2, "Client Search", "Search for client details using" & RR_GetRecordForReporting("LastName;FirstName", dictmpDriverRecord), "Entered Last Name and First Name"
		Case Else
			HandleRC micFail
			AV_SearchClient = micFail			
			ReportStep 2, "Client Search", "Search for client details using " & SearchBy, "Search by option " & SearchBy & " is not valid"
			Exit Function
	End Select

    'Select Identify Client task
	If rc = micPass Then rc = SelectTask ("IdentifyClient", "Search")
	'Wait for search to complete
	If rc = micPass Then rc = WaitForObject(frIdentifyClient.WebButton("OK"))  

   'Error handling
	If rc <> micPass Then
		HandleRC rc
		AV_SearchClient = rc
		ReportStep 2, "Client Search", "Search for client details using " & SearchBy, "Search failed. OK button not enabled"
		Exit Function
	End If

	Flag = True
	
	'Check for any popups. Click will be in following order: Cancel, No, Ok, Yes which ever exists first
	rc = HandleRepViewPopup(vbNullString,vbNullString)
	If rc = micPass Then
      If Left(gbPopupMessageText,16) = "No clients found" Then
			'Search by name, client not found, pop up for 'add new' option appeared
			AddNewPopUpAppeared=True
		Elseif Instr(1,gbPopupMessageText,"Not Found.") >0 Then
			Flag = False
			'do Nothing
		Else
			'Search result exceeded maximum count
			AddNewPopUpAppeared=False
		End If
	End If
	
	'for Addnew = Yes, next function call will take care about adding the client.
	If AddNew = "Yes" Then
		'Select the add new client option
		rc = SelectTask("IdentifyClient", "Add New Client")	
	Elseif Flag = False Then
		rc = micFail
	ElseIf AddNewPopUpAppeared = False Then
		rc = ObjectButton (frIdentifyClient, "OK", "Click")
    End If

	'Error handling
	If rc <> micPass Then
		HandleRC rc
		ReportStep 2, "Client Search", "Search for client details using " & SearchBy, "Client Search failed" & gbPopupMessageText
	Else
		ReportStep 2, "Client Search", "Search for client details using " & SearchBy, "Client was identified"
	End If

	AV_SearchClient = rc	
End function
'################################################################################################################################
'	FUNCTION NAME		: AV_EndSession()
'
'	DESCRIPTION			:  Logout of the application
'
'	PARAMETERS			: (None)
'			
'	DEPENDENCIES		: (None)
'    
' 	RETURN VALUE(S)		: (None)
'
'	ERRORS				: (None)
'
'	AUTHOR				: Prashanthi Nandagiri
'
'	ORIGINAL DATE		: Sep 18 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'	
'
'################################################################################################################################
Public Function AV_EndSession()
	Dim rc
	On Error Resume Next
    'rc = SelectRepViewTab("PolicyQuoteSummary Tabs","Policy")
	rc = WaitForwindow(gbBrowserName,gbApplicationHomePage,"PolicyAmendment","")
	If rc=micPass Then rc = WaitForObject(frPolicyAmendment.WebElement("Complete"))
	If rc=micPass Then rc = SelectTask("PolicyAmendment","Complete")
	If rc=micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"PolicyQuoteSummary","")
	If rc=micPass Then rc = WaitForObject(frPolicyQuoteSummary.WebElement("Complete"))
	If rc=micPass Then rc = SelectTask("PolicyQuoteSummary", "Complete")
	If rc=micPass Then rc = CallWrapUp()
	If rc=micPass Then rc = RepViewLogout()

	AV_EndSession = rc
End Function

'################################################################################################################################
'	FUNCTION NAME		: AV_EnterEffectiveDate(ByVal ScreenObject, ByVal TaskLinkName, ByVal StartDate, ByVal AddDays)
'
'	DESCRIPTION			: This function will change the effective date as per the input data
'
'	PARAMETERS			: 
'		ScreenObject					:   
'			TaskLinkName:  
'		StartDate:      AddDays
'		
'
'	DEPENDENCIES		: (None)
'
' 	RETURN VALUE(S): 
'		micPass	 		: On successful execution of the function
'		micFail	 		: On unsuccessful execution of the function
'
'	ERRORS				: (None)
'
'	AUTHOR				:  Prashanthi Nandagiri
'
'	ORIGINAL DATE		: 10 Jun 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY			:	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------

'################################################################################################################################
Public Function AV_EnterEffectiveDate(ByVal ScreenObject, ByVal TaskLinkName, ByVal StartDate, ByVal AddDays)
	Dim rc, OutString, EffectiveDate, DateInfo,EffectiveYear, EffctiveMonth, Effctiveday
	Dim CustomErrorMessage

	On Error Resume Next
	'wait for the Screen to load
	rc = WaitForObject(frPolicyAmendment.WebElement(TaskLinkName))
	
	'Error handling
	If rc <> micPass Then
		HandleRC rc
		EnterEffectiveDate = rc
		ReportStep 2, "Enter Effective Date", "Screen should be loaded", "Screen not loaded"
		Exit Function
	End If
	
	If IsNumeric(AddDays) Then
		AddDays = CInt(AddDays)
	Else
		AddDays = 0
	End If
	
	If StartDate = "Term Date" Then
		rc = SelectTask("PolicyAmendment", TaskLinkName)
		If rc = micPass Then rc = GetFrameData(frPolicyAmendment,"Term Date","Policy Status")
		If rc = micPass Then rc = AddToDateString("d", AddDays, gbReturnValue, gbAppDateFormat)
		EffectiveDate = gbReturnValue
	ElseIf StartDate = "System Date" Then
		rc = AddToDateString("d", AddDays, gbServerDate, gbAppDateFormat)
		EffectiveDate = gbReturnValue
	ElseIf StartDate = "Any Date" Then
		rc = ObjectEdit(ScreenObject, "Effective Date", "ReadValue", "", "", "", "")
		If rc = micPass Then rc = AddToDateString("d", AddDays, gbReturnValue, gbAppDateFormat)
		EffectiveDate = gbReturnValue
	ElseIf IsDate(StartDate) Then
		rc = AddToDateString("d", AddDays, StartDate, gbAppDateFormat)
		EffectiveDate = gbReturnValue
	End If

	'Enter Inception Date
	'If rc = micPass Then rc = ObjectEdit(ScreenObject, "Effective Date", "EnterValue", "", "", "", EffectiveDate)
	If rc = micPass Then rc = SelectTask("PolicyAmendment", TaskLinkName)
	'Static wait
	Wait gbObjectSyncTime
	
	'Check the transaction date
	rc = ObjectEdit(ScreenObject, "Effective Date", "ReadValue", "", "", "", "")
	If rc = micPass And StartDate <> "Any Date" Then
		If CDate(EffectiveDate) <> CDate(gbReturnValue) Then
			rc = micFail
			CustomErrorMessage = ". Future date amendment exists for " & gbReturnValue
		End If
	Else
		EffectiveDate = gbReturnValue
	End If
		
	'Error handling
	If rc <> micPass Then
		HandleRC rc
		ReportStep 2, "Effective Date", "Enter transaction effective Date as <b>" & EffectiveDate & "</b>", "Unable to enter effective date" & CustomErrorMessage
	Else
		ReportStep 2, "Effective Date", "Enter transaction effective Date as <b>" & EffectiveDate & "</b>", "Transaction date was entered and " & x & " task has been selected"
	End If

	AV_EnterEffectiveDate = rc
End Function

'################################################################################################################################
'	FUNCTION NAME			: AV_SelectPolicy (ByVal PolicyNum, ByVal ExpPolicyStatus)
'
'	DESCRIPTION				: The purpose of this function is to verify if the policy exists.
'							  If the policy exists, check the status and select the policy.
'
'	PARAMETERS				: 
'		PolicyNum			: policy number info
'		ExpPolicyStatus		: Policy status
'							  Valid values are P-In Force, P-Pending Cancel, P-Cancelled, P-Reinstated, P-Endorsed
'					
'	DEPENDENCIES			: (None)
'   
' 	RETURN VALUE(S): 
'		micPass	 			: On successful execution of the function
'		micFail	 			: On unsuccessful execution of the function
'
'	ERRORS					: (None)
'
'	AUTHOR					: Prashanthi Nandagiri
'
'	ORIGINAL DATE			: June 16 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY		:	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'
'
'################################################################################################################################
Public Function AV_SelectPolicy (ByVal PolicyNum, ByVal ExpPolicyStatus)

	On Error Resume Next
	
	Dim rc, RowCount, CurrentRow, ActPolicyNumber, ActPolicyStatus, ActPolicyState, PolicyObject
	'Dictionary object to hold string index based array
	Dim dicRecordSet
	Dim PolicyColumn, StatusColumn, StateColumn
	
	' QTP recognizes the table columns with the specified numbers 
	PolicyColumn=1
	StatusColumn=3
	StateColumn =2
	
	rc = WaitForObject(frPolicyQuoteSummary.WebTable("Policy Number"))
	'Error handling
	If rc <> micPass Then
		HandleRC rc
		AV_SelectPolicy = rc		
		ReportStep 2, "Select Policy", "Select the policy <b class=""highlight"">" & PolicyNum & "</b> with status <b class=""highlight"">" & ExpPolicyStatus & "</b>", "Policy table object failed to load"
		Exit Function
	End If
	
	'if parameter is null , use the database value
	If ExpPolicyStatus=vbNullString Then ExpPolicyStatus="P-In Force"
	'If ExpPolicyStatus=vbNullString Then ExpPolicyStatus=""
	
	'as it is taking time to load the table static wait is used.
	Wait gbObjectSyncTime
	
	RowCount = frPolicyQuoteSummary.WebTable("Policy Number").RowCount
	'Row number 1 will be header row. Current row will start from 2.
	For CurrentRow = 2 To RowCount
		ActPolicyNumber = frPolicyQuoteSummary.WebTable("Policy Number").GetCellData(CurrentRow,PolicyColumn)
		ActPolicyStatus = frPolicyQuoteSummary.WebTable("Policy Number").GetCellData(CurrentRow,StatusColumn)
		ActPolicyState	= frPolicyQuoteSummary.WebTable("Policy Number").GetCellData(CurrentRow,StateColumn)

		If ActPolicyNumber = PolicyNum Then
			If ActPolicyStatus = ExpPolicyStatus Or Left(ExpPolicyStatus,2) <> "P-" Then
				Set PolicyObject = Description.Create		'Create description for the object
				PolicyObject("html tag").Value = "TD"
				PolicyObject("innertext").Value = ActPolicyNumber				
				pgChordiantHome.Sync
				frPolicyQuoteSummary.WebElement(PolicyObject).FireEvent "onmouseover"
				frPolicyQuoteSummary.WebElement(PolicyObject).FireEvent "onclick"
				pgChordiantHome.Sync
				If Left(ExpPolicyStatus,2) <> "P-" Then
					ReportStep 2, "Select Policy", "Select the policy <b class=""highlight"">" & PolicyNum & "</b>", "Policy has been selected. Policy status is <b>" & ActPolicyStatus & "</b> and state is <b>" & ActPolicyState & "</b>"
				Else
					ReportStep 2, "Select Policy", "Select the policy <b class=""highlight"">" & PolicyNum & "</b> with status <b class=""highlight"">" & ExpPolicyStatus & "</b>", "Policy has been selected. Policy state is <b>" & ActPolicyState & "</b>"
				End If
				AV_SelectPolicy = micPass
			Else
				HandleRC micFail
				AV_SelectPolicy = micFail				
				ReportStep 2, "Select Policy", "Select the policy <b class=""highlight"">" & PolicyNum & "</b> with status <b class=""highlight"">" & ExpPolicyStatus & "</b>", "Policy status is not matching. The actual status is " & ActPolicyStatus
			End If
			Exit Function			
		End If
	Next
		
	ReportStep 2, "Select Policy", "Select the policy <b class=""highlight"">" & PolicyNum & "</b> with status <b class=""highlight"">" & ExpPolicyStatus & "</b>", "Policy " & PolicyNum & " was not found"
	AV_SelectPolicy = micFail
End Function



'################################################################################################################
'	FUNCTION NAME			: AV_FullStateName(ByVal StateAbbrevationCode)
'
'	DESCRIPTION				: Gives the abbrevated code for FullStateName 
'
'	PARAMETERS
'		StateAbbrevationCode		: Abbreviated State Code
'
'	DEPENDENCIES			: (None)
'
' 	RETURN VALUE(S)
'		micPass	 			: On successful execution of the function
'		micFail	 			: On unsuccessful execution of the function
'
'	ERRORS					: (None)
'
'	AUTHOR					: Prashanthi nandagiri
'
'	ORIGINAL DATE			: June 19 2008
'----------------------------------------------------------------------------------------------------------------
'										R E V I S I O N    H I S T O R Y
'----------------------------------------------------------------------------------------------------------------
'	REVISED DATE	:	REVISED BY		:						CHANGE DESCRIPTION
'----------------------------------------------------------------------------------------------------------------
'
'
'################################################################################################################
Public Function AV_FullStateName(ByVal StateAbbrevationCode)
   On Error Resume Next
	Select Case UCase(Trim(StateAbbrevationCode))
		Case "AZ"
			gbReturnValue = "Arizona"
		Case "CA", "CA-MC", "CA-CAS"
			gbReturnValue = "California"
		Case "CO"
			gbReturnValue = "Colorado"
		Case "FL"
			gbReturnValue = "Florida"
		Case "GA"
			gbReturnValue = "Georgia"
		Case "IL"
			gbReturnValue = "Illinois"
		Case "IN"
			gbReturnValue = "Indiana"
		Case "MN"
			gbReturnValue = "Minnesota"
		Case "MO"
			gbReturnValue = "Missouri"
		Case "NV"
			gbReturnValue = "Nevada"
		Case "NY"
			gbReturnValue = "New York"
		Case "PA"
			gbReturnValue = "Pennsylvania"
		Case "WI"
			gbReturnValue = "Wisconsin"
		Case "NJ"
			gbReturnValue = "New Jersey"
		Case "OH"
			gbReturnValue = "Ohio"
		Case "OR"
			gbReturnValue = "Oregon"
		Case "TX"
			gbReturnValue = "Texas"
		Case "WA"
			gbReturnValue = "Washington"
		Case Else
			gbReturnValue = StateAbbrevationCode
	End Select
	
	AV_FullStateName = micPass
End Function

'#################################################################################################
'	FUNCTION NAME		: AV_AddDriver(ByVal TableName,ByVal RowID)
'
'	DESCRIPTION			: Add the driver based on the input data
'
'	PARAMETERS			: 
'		TableName		: Table name containing the User information
'		RowID			: Unique value, representing the row containing the test data
'					
'	DEPENDENCIES		: (None)
'
' 	RETURN VALUE(S): 
'		micPass	 		: On successful execution of the function
'		micFail	 		: On unsuccessful execution of the function
'
'	ERRORS				: (None)
'
'	AUTHOR				: Prashanthi Nandagiri
'
'	ORIGINAL DATE		: Sep 24 2008
'-----------------------------------------------------------------------------------------------------------------------

'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY			:	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'  17-Apr-2009				Prashanthi Nandagiri	Added the if condition for adding license details only for complex scenarios
' 
' 
'
'################################################################################################################################
Public Function AV_AddDriver(ByVal TableName, ByVal RowID)
	Dim rc, RowCnt

	On Error Resume Next
    'Set dictmpDriverRecord = CreateObject("Scripting.Dictionary")
    
	
		rc = ReportStep(1, "AddDriver ", "", "")


		If rc=micPass Then rc = SelectTask("DriverPage","Add New Driver")
		
		If rc=micPass Then rc = WaitforWindow(gbBrowserName, gbApplicationHomePage, "IdentifyClient","")
		If rc=micPass Then rc = SearchClient(TableName,RowID,"Name","Yes")
		If rc=micPass Then rc = WaitForObject(frAddPersonalClient.WebButton("OK"))
		If rc=micPass Then rc = AV_AddPersonalClientInfo(TableName, RowID)
		'If rc=micPass Then rc = AddDriverInfo(TableName, RowID)
		If rc=micPass Then rc = AV_ValidateAddUpdateDriverInfo(TableName, RowID,"AVS_LicenseInfo",RowID,"","")
		If rc=micPass Then rc = WaitForwindow(gbBrowserName,gbApplicationHomePage,"DriverPage","")
		If rc=micPass Then rc = WaitForObject(frDriverPage.WebElement("Order Online MVR"))	
        If rc=micPass Then 
			RowCnt = frDriverPage.WebTable("Driver Number").RowCount
			DataTable.Value("DriverFullName",gbTestLabName) = frDriverPage.WebTable("Driver Number").GetCellData(RowCnt,2)
			gbDriverName = DataTable.Value("DriverFullName",gbTestLabName)
		End If

	If gbApplicableScript = "Complex Scenarios" Then
	
		If rc=micPass Then rc = SelectRow(frDriverPage,"Driver Number","","","","LAST")


		'AddValid License Details
		rc = SelectTask	("DriverPage", "Add License Data")
		'Error handling
		If rc <> micPass Then
			HandleRC rc
			AV_AddDriver = rc
			ReportStep 2, "Add Licence Details", "Click on Add License Data link" , "Add License data link not found"
			Exit Function
		End If

		' Select state from the dropdown on Add Licence Details page
		If rc=micPass Then rc=ObjectList (frAddUpdateLicence, "LicenseState", "SelectValue", "AVS_LicenseInfo", RowID, "LicenseState","")
    
		'Enter Licence number on  Add Licence Details page
		'GetValidLicenseNumber gbAbbreviatedStateCode
		If rc=micPass Then rc=ObjectEdit (frAddUpdateLicence, "LicenseNumber", "EnterValue", "AVS_LicenseInfo", RowID, "DriverLicense1", "")
		'Click  OK on Add Licence Details page
		If rc=micPass Then rc=ObjectButton (frAddUpdateLicence, "OK", "Click")
		
		' Handle Pop up's if any
		HandleRepViewPopup	"","OK"
		
		'Static wait is required
		wait gbWebPageSyncTime
		
		'rc = WaitForObject(frDriverPage.WebTable("License"))
		If rc <> micPass Then
			HandleRC rc
			AV_AddDriver = rc
			ReportStep 2, "Add Licence Details", "Add New Driver Licence Details" , "Licence Details are not added"
			Exit Function
		Else
			AV_AddDriver = rc
			ReportStep 2, "Add Licence Details ","Add New Driver Licence Details",  "Licence Details Added"
		End If
	End If
	
		AV_AddDriver = rc
End Function

'################################################################################################################################
'	FUNCTION NAME		: AV_AddPersonalClientInfo(ByVal TableName, ByVal RowID)
'
'	DESCRIPTION			: This function will add or update Personal Client info
'		
'   PARAMETERS			:
'		TableName		: Table name containing the client info
'		RowID			: Unique value, representing the row containing the test data
'					
'	DEPENDENCIES		: (None)
'
'    
' 	RETURN VALUE(S): 
'		micPass	 		: On successful execution of the function
'		micFail	 		: On unsuccessful execution of the function
'
'	ERRORS				: (None)
'
'	AUTHOR				: 
'
'	ORIGINAL DATE		: 
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'
'
'
'################################################################################################################################
Public Function AV_AddPersonalClientInfo(ByVal TableName, ByVal RowID)
Dim rc

	On Error Resume Next
	
	'Wait for the Screen object to load
	rc = WaitForObject(frAddPersonalClient.WebButton("OK"))
	
	'Error handling
	If rc <> micPass Then
		HandleRC rc
		AV_AddPersonalClientInfo = rc
		ReportStep 2, "Add Personal Client Info", "Add Personal Client details", "Add Personal Client Screen not loaded"
		Exit Function
	End If
	
	'Select Occupation
	If rc=micPass Then rc=ObjectList (frAddPersonalClient, "Occupation", "SelectValue", TableName, RowID, "Occupation","")
	
	'Enter DOB 
	If rc=micPass Then rc=ObjectEdit (frAddPersonalClient, "DOB", "EnterDate", TableName, RowID, "DOB", "")
	
	'Select MaritalStatus
	If rc=micPass Then rc=ObjectList (frAddPersonalClient, "Marital Status", "SelectValue", TableName, RowID, "MaritalStatus","")

	'Select Gender
	If rc=micPass Then rc=ObjectList (frAddPersonalClient, "Sex", "SelectValue", TableName, RowID, "Gender","")

	'Enter First Name
	If rc=micPass Then rc=ObjectEdit (frAddPersonalClient, "First Name","EnterValue", TableName, RowID,"FirstName","")	


'	'Enter Contact Information on Add Personal Client window for the new client	
'	TableName  = "AddressInfo"
'	RowID = gbAbbreviatedStateCode&"_Residence_Address"
	
   
  'Enter Apartment Number 
If rc=micPass Then rc=ObjectEdit (frAddPersonalClient, "Apartment Number","ReadValue", "","","","")	
'If gbReturnValue <> VBNullString Then

If gbReturnValue <> "BLANK" Then
	'Select Apartment type
	If rc=micPass Then rc=ObjectList (frAddPersonalClient, "UnitType", "ReadValue", "","", "Unit Type","")
	If  gbReturnValue  = "BLANK" Then
		If rc=micPass Then rc=ObjectList (frAddPersonalClient, "UnitType", "SelectValue", "","", "Unit Type","APT")
	End If
End If

   
	'Click on the OK button 
	If rc=micPass Then rc=ObjectButton (frAddPersonalClient, "OK", "Click")
	
	'To handle Optional IE popup 
	HandleRepViewPopup "Optional","OK"
	If InStr(gbPopupMessageText, "Address was validated by the U.S. Postal Service and corrected")>0 Then
		'Click on ok button in add scree, for second time, if the pop-up has appeared
		If rc=micPass Then rc=ObjectButton (frAddPersonalClient, "OK", "Click")
	ElseIf InStr(gbPopupMessageText, "Unit Type")>0 Then
		If rc=micPass Then rc=ObjectButton (frAddPersonalClient, "OK", "Click")
	End If
	
	'To handle Optional IE popup 
     HandleRepViewPopup "Optional", "OK"
	If InStr(gbPopupMessageText, "Driver License Details missing") > 0 Then
		'do nothing
			ElseIf gbPopupMessageText <> "BLANK" Then
				rc =  micFail
			Elseif InStr(gbPopupMessageText, "UNDERWRITING RESULTS") > 0   Then
			'Do nothing	
			Elseif InStr(gbPopupMessageText, "PO Box is being") > 0 Then
      End If
	
	'Error handling
	If rc <> micPass Then
		HandleRc rc
		ReportStep 2, "Add Client", "Add Personal Client with all required details" , "Unable to add a new client"
	Else
		ReportStep 2, "Add Client", "Add Personal Client with all required details", "New client created"
	End If
	AV_AddPersonalClientInfo = rc
End Function

'################################################################################################################################
'            FUNCTION NAME                                              : IntializeAVSVariables()
'
'            DESCRIPTION                                                   : Initializes all AVS related variables.
'
'            PARAMETERS                                      : (None)
'                                    
'                                                            
'            DEPENDENCIES                                               : (None)
'
'
'            RETURN VALUE(S): 
'                        micPass                                                          : On successful execution of the function
'                        micFail                                                 : On unsuccessful execution of the function
'
'            ERRORS                                                                      : (None)
'
'            AUTHOR                                                                       : Prashanthi Nandagiri
'
'            ORIGINAL DATE                                                : Sep16 2008
'-----------------------------------------------------------------------------------------------------------------------
'                                    R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'            REVISED DATE            :           REVISED BY    :          CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'            
'
'
'################################################################################################################################
Public Function IntializeAVSVariables()

     On Error Resume Next       
	'RepView region and URLs for various regions
	
	gbDBUserName              = Environment("DBUserName")
	gbDBUserPassword       = Environment("DBPassword")
	gbApplicableScript         = Environment("ApplicableScript")
	Environment("ApplicableState") = ""
	'gbExecutionFlow = Environment("ExecutionFlow")
	If  gbApplicableScript = "Simple Scenarios" Then
		gbExecutionFlow = Environment("SimpleScenario")
	ElseIf  gbApplicableScript = "Complex Scenarios" Then
		gbExecutionFlow = Environment("ComplexScenario")
	End If
	
	
	gbAppRegion = Environment("Region")
'Environment("ApplicableState")

	If gbAppRegion = "QA" Then 
	   	gbDB2Env="db2q"
	Elseif gbAppRegion = "IST2" Then 
		gbDB2Env="db2k"
	Elseif gbAppRegion = "IST1" Then 
		gbDB2Env="db2k"
	 Elseif gbAppRegion = "FAST" Then 
		gbDB2Env="db2k"
	Elseif gbAppRegion = "RETRO2" Then 
		gbDB2Env="db2t"
	End If
	gbDB2ConnectionSring = "PROVIDER=IBMDADB2;DATA SOURCE=" & gbDB2Env & ";USER ID=" & gbDBUserName & ";PASSWORD=" & gbDBUserPassword & ";"


  'Intialize Global Variables
    Set gbdicAVtmpObject                                               =  CreateObject("Scripting.Dictionary")
    Set gbPolicyAssignment                                            =          CreateObject("Scripting.Dictionary")
	Set gbdicAccViolDescObject                                          =          CreateObject("Scripting.Dictionary")

	IntializeAVSVariables = micPass
            
End Function
'################################################################################################################################
'	FUNCTION NAME		: AV_GetTestScriptRow(ByVal SheetName)
'
'	DESCRIPTION			: Iterates through "TestScript" sheet in the testware excel file and finds the row in which 
'						  the testcase is preseent
'
'	PARAMETERS			: 
'		SheetName					:	 Type of Functionality Sheet needs to be performed based on the TestcaseID
'			
'	DEPENDENCIES		: (None)
'    
' 	RETURN VALUE(S)		: 
'		Rownumber		: If the test case ID is found
'		-1				: If the test case ID is not found
'
'	ERRORS				: (None)
'
'	AUTHOR				: Prashanthi Nandagiri
'
'	ORIGINAL DATE		: Sep 24 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'	
'
'################################################################################################################################
Public Function AV_GetTestScriptRow(ByVal SheetName)
	Dim RowIteration, RowsCount, CurrTestCase
	On Error Resume Next
	'Any error is handled by the driver script
	
	'Get rowcount
	RowsCount=DataTable.GetSheet(SheetName).GetRowCount
	
	'Find test case row by iterating
	For RowIteration=1 To RowsCount
		Datatable.GetSheet(SheetName).SetCurrentRow RowIteration
		CurrTestCase=DataTable.Value("TestCaseID",SheetName)
		If CurrTestCase=gbCurrTestCaseName Then
			AV_GetTestScriptRow=RowIteration
			Exit Function
		End If
	Next
	
	'ReportMessage micWarning, "Test case search", "Test case " & gbCurrTestCaseName & " not found in sheet 'TestScript'"
	
	'Row number returned as -1 as test case is not found
	AV_GetTestScriptRow=-1
End Function
'#################################################################################################
'	FUNCTION NAME		: AV_UpdateDriver(ByVal TableName,ByVal RowID)
'
'	DESCRIPTION			: Update the driver information based on the input data
'
'	PARAMETERS			: 
'		TableName		: Table name containing the client info
'		RowID			: Unique value, representing the row containing the test data
'					
'	DEPENDENCIES		: (None)
'
' 	RETURN VALUE(S): 
'		micPass	 		: On successful execution of the function
'		micFail	 		: On unsuccessful execution of the function
'
'	ERRORS				: (None)
'
'	AUTHOR				: Prashanthi Nandagiri
'
'	ORIGINAL DATE		: May 27 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY			:	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
' 
' 
' 
'
'################################################################################################################################
Public Function AV_UpdateDriver(ByVal TableName, ByVal RowID)
	Dim rc, DriverNum, ReportMsg, dicRecordset

	On Error Resume Next

     ReportMsg = VbNullString
    'gbDriverName = Datatable.Value("DriverFullName", "AccidentsViolations")

	rc = ReportStep(1, "Update Driver  " & gbDriverName , "", "")
	If rc = micPass Then rc= SearchWebTableRow(frDriverPage.WebTable("Driver Number"), "2" , gbDriverName, "No",True)
    If rc = micPass Then rc= SelectRow(frDriverPage,"Driver Number","","","",gbReturnValue-1)

    If rc = micPass Then rc = SelectTask("DriverPage","Update Driver")
	If rc = micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"Add Update Driver","" )
	If rc = micPass Then rc = WaitForObject(frAddUpdateDriver.WebButton("Ok"))

	  If TableName <> "" Then
		Set dicRecordset=CreateObject("Scripting.Dictionary")
		rc = RetrieveRecordset(TableName, RowID, dicRecordset)
		'Error Handling
		If rc <> micPass Then
			HandleRC rc
			ObjectEdit = rc
			ReportStep 2, "Fetch Test Data", "Obtain test data from table " & TableName & " using rowid " & RowID, "Unable to obtain the data from the database." & Err.Description
			Exit Function
		End If
	End If

	If dicRecordset("Title") <> vbNullString Then
		If rc=micPass Then rc=ObjectList (frAddUpdateDriver, "Title", "SelectValue", TableName, RowID, "Title","")
		ReportMsg = ReportMsg & "Title: " & "<b>" & dicRecordset("Title") & "</b> <BR>" &  vbCrLf
	End If

	If dicRecordset("FirstName") <> vbNullString Then
		If rc=micPass Then rc=ObjectEdit (frAddUpdateDriver, "First Name", "EnterValue", TableName, RowID,"FirstName", "")
		ReportMsg = ReportMsg & "FirstName: " & "<b>" & dicRecordset("FirstName") & "</b> <BR>" &  vbCrLf
	End If

	If dicRecordset("MiddleName") <> vbNullString Then
		If rc=micPass Then rc=ObjectEdit (frAddUpdateDriver, "Middle Name", "EnterValue", TableName, RowID,"MiddleName", "")
		ReportMsg = ReportMsg & "MiddleName: " & " <b>" & dicRecordset("MiddleName") & "</b> <BR>" &  vbCrLf
	End If
	
	If dicRecordset("LastName") <> vbNullString Then
		If rc=micPass Then rc=ObjectEdit (frAddUpdateDriver, "Last Name", "EnterValue", TableName, RowID,"LastName", "")
		ReportMsg = ReportMsg & "LastName: " & "<b>" & dicRecordset("LastName") & "</b> <BR>" &  vbCrLf
	End If

	'Suffix
	If dicRecordset("Suffix") <> vbNullString Then
		If rc=micPass Then rc=ObjectList (frAddUpdateDriver, "Suffix", "SelectValue", TableName, RowID, "Suffix","")
		ReportMsg = ReportMsg & "Suffix: " & "<b>" & dicRecordset("Suffix") & "</b> <BR>" &  vbCrLf
	End If

    'Gender
	If dicRecordset("Gender") <> vbNullString Then
		If rc=micPass Then rc=ObjectList (frAddUpdateDriver, "Sex", "SelectValue", TableName, RowID, "Gender","")
		ReportMsg = ReportMsg & "Gender: " & "<b>" & dicRecordset("Gender") & "</b> <BR>" &  vbCrLf
	End If

	'MartialStatus
	If dicRecordset("MaritalStatus") <> vbNullString Then
		If rc=micPass Then rc=ObjectList (frAddUpdateDriver, "MaritalStatus", "SelectValue", TableName, RowID, "MaritalStatus","")
		ReportMsg = ReportMsg & "MaritalStatus: " & "<b>" & dicRecordset("MaritalStatus") & "</b> <BR>" &  vbCrLf
	End If

	'DOB
	If dicRecordset("DOBDate") <> vbNullString Then
		If rc=micPass Then rc=ObjectEdit (frAddUpdateDriver, "DOB", "EnterDate", TableName, RowID,"DOB", "")
		ReportMsg = ReportMsg & "DOB: " & " <b>" & dicRecordset("DOBDate") & "</b> <BR>" &  vbCrLf
	End If

	'Occupation
	If dicRecordset("Occupation") <> vbNullString Then
		If rc=micPass Then rc=ObjectList (frAddUpdateDriver, "Occupation", "SelectValue", TableName, RowID, "Occupation","")
		ReportMsg = ReportMsg & "Occupation: " & " <b>" & dicRecordset("Occupation") & "</b> <BR>" &  vbCrLf
	End If

   'Relation To Insured
	If dicRecordset("Relation") <> vbNullString Then
		If rc=micPass Then rc=ObjectList (frAddUpdateDriver, "Rel to Insured", "SelectValue", TableName, RowID, "Relation","")
		ReportMsg = ReportMsg & "Relation: " & "<b>" & dicRecordset("Relation") & "</b> <BR>" &  vbCrLf
	End If
   
  'Enter GD Terms
	If dicRecordset("GDTerms") <> vbNullString Then
		If  frAddUpdateDriver.WebEdit("GD Terms").Exist(3) Then rc = ObjectEdit (frAddUpdateDriver, "GD Terms", "EnterValue", TableName, RowID,"GDTerms", "")
		ReportMsg = ReportMsg & "GDTerms: " & "<b>" & dicRecordset("GDTerms") & "</b> <BR>" &  vbCrLf
	End If

  'Enter Apartment Number 
If rc=micPass Then rc=ObjectEdit (frAddUpdateDriver, "Apt Number","ReadValue", "","","","")	
'If gbReturnValue <> VBNullString Then
If gbReturnValue <> "BLANK" Then
	'Select Apartment type
	If rc=micPass Then rc=ObjectList (frAddUpdateDriver, "UnitType", "ReadValue", "","", "Unit Type","")
	If  gbReturnValue  = "BLANK" Then
		If rc=micPass Then rc=ObjectList (frAddUpdateDriver, "UnitType", "SelectValue", "","", "Unit Type","APT")
	End If
End If

'gbDriverName = ""
'ObjectEdit (frAddUpdateDriver, "Apt Number","ReadValue", "","","","")	
If rc=micPass Then rc=ObjectEdit (frAddUpdateDriver, "First Name", "ReadValue", "", "","", "")
	gbDriverName = gbReturnValue
If rc=micPass Then rc=ObjectEdit (frAddUpdateDriver, "Last Name", "ReadValue", "", "","", "")
DataTable.Value("DriverFullName",gbTestLabName) = gbDriverName & ";" & gbReturnValue
gbDriverName = gbDriverName & " " & gbReturnValue

    'Click on the OK button 
	If rc=micPass Then rc=ObjectButton(frAddUpdateDriver, "OK", "Click")
	
'	'Static wait is required
'	Wait gbWebPageSyncTime
	
	'To handle Optional IE popup 
	HandleRepViewPopup vbNullString,"OK"
	If InStr(gbPopupMessageText, "Address was validated by the U.S. Postal Service and corrected")>0 Then
		'Click on ok button in add scree, for second time, if the pop-up has appeared
		If rc=micPass Then rc=ObjectButton(frAddUpdateDriver, "OK", "Click")
	ElseIf	InStr(gbPopupMessageText, "Unit Type")>0 Then
		If rc=micPass Then rc=ObjectButton(frAddUpdateDriver, "OK", "Click")
	ElseIf InStr(gbPopupMessageText, "Driver License Details missing") > 0 Then
		'do nothing
	ElseIf gbPopupMessageText = "BLANK" Then
		'do nothing
	Else
        HandleRC micFail
		ReportStep 2, "Update Driver", "Update Driver with details: " & ReportMsg,"Message on Popup: " & gbPopupMessageText
		AV_UpdateDriver = micFail
        Exit Function
	End If

	HandleRepViewPopup "Optional", "OK"
	If InStr(gbPopupMessageText, "Driver License Details missing") > 0 Then
		'do nothing
	ElseIf gbPopupMessageText <> "BLANK" Then
		rc =  micFail
    End If
        
    'Error handling
	If rc <> micPass Then
		HandleRc rc
		ReportStep 2, "Update DriverInfo", "Update required driver info:" , "Unable to update the driver information"
	Else
        ReportStep 2, "Update DriverInfo", "Update required driver info:" & "<BR>"  & ReportMsg, "Driver information updated"
		ReportMsg = ""
	End If

	'Wait for object to load
	If rc=micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"DriverPage","")
	If rc=micPass Then rc = WaitForObject(frDriverPage.WebElement("Update Driver"))

    AV_UpdateDriver = rc
End Function
'################################################################################################################################
'	FUNCTION NAME		: AV_AddAccidentOrViolation( )
'
'	DESCRIPTION			: This function adds the specified Accident or Violation  for the specified Driver for Single Policy
'
'	PARAMETERS			: None

 		
'
'	DEPENDENCIES		: (None)
'
' 	RETURN VALUE(S): 
'		micPass	 		: On successful execution of the function
'		micFail	 		: On unsuccessful execution of the function
'
'	ERRORS				: (None)
'
'	AUTHOR				:  Gopi Chand Tadiboyina
'
'	ORIGINAL DATE		: 17th Sept 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY			:	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
' 03-25-2009                  Prashanthi Nandagiri          Updated reportwarning message for PLCs conditions with > 0 points for Ist1 and IST2 region
' 03-25-2009                  Prashanthi Nandagiri          Updated the value gbTestCaseStatus to micwarning in one of the condition
' 04-09-2009                  Prashanthi Nandagiri          Declared variables "itemsList", "arrList", "listCount"
' 05-14-2009                  Prashanthi Nandagiri          Commented code for reporting warning message for scenarios contains PLCS with G103 letters in IST regions, since now G103 letter is generated for all regions
'05-29-2009					Prashanthi Nandagiri 			 Added  Wait gbObjectSyncTime statement 
'06-24-2009					Prashanthi Nandagiri			Initialized gbSimpleSourceFlag value
'################################################################################################################################
Public Function AV_AddAccidentOrViolation()
'	Option Explicit
	Dim rc,Cnt,OccuranceDate,reportVar,firstName,RunTimeObject,WeObj,UDRval,diffDate,tempDate,transEndDate,transStartDate,rCount,ClaimsDairyRunFlag,ct
	Dim rowNum,sourceName,pts, itemsList, arrList, listCount
	'rc=micPass
    On Error Resume Next
	gbMVRFlag= False 
	MVRUpdateFlag = False
	ClaimsDairyRunFlag = False
	gbSimpleSourceFlag=False
	
	'Reporing
	rc = ReportStep(1,"AddAccidentOrViolation","","")
	Set frDriverPage = Browser(gbBrowserName).Page(gbApplicationHomePage).Frame("DriverPage")

'	'Code for CA State and IST1 region.
'		For Cnt = 1 to gbdicAVtmpObject("Counter")
'				If  trim(gbdicAVtmpObject("InformationSource_"&Cnt)) = "PLCS" Then
'			If (gbAppRegion = "IST1" OR gbAppRegion = "IST2") and (gbAbbreviatedStateCode = "CA"  OR gbAbbreviatedStateCode = "CA-CAS" OR gbAbbreviatedStateCode = "CA-MC") and Cint(gbdicAVtmpObject("Points_"&Cnt)) > 0 Then
'                rc=micWarning
'				gbTestCaseStatus=micWarning
'				ReportWarning	vbCritical,"In IST1 or IST2  region for California state, point cannot be charged even if chargeable unless a G103 letter is sent, Currently no G103 leet can be sent for PLCS in IST1 or IST2"
'                AV_AddAccidentOrViolation = rc
'				Exit Function
'			End If
'			End if
'		Next
	
	'Selects the specified driver from the Driver table
	If rc= micPass Then rc= SearchWebTableRow(frDriverPage.WebTable("Driver Number"), "2" , gbDriverName, "No",True)
    If rc=micPass Then rc= SelectRow(frDriverPage,"Driver Number","","","",gbReturnValue-1)
	Wait 1
	'Gets Driver first Name and Last Name from driver Page
	GetFrameData frDriverPage,"First","Marital Status"
	gbDriverFirstName = gbReturnValue
	GetFrameData frDriverPage,"Last","Sex"
	gbDriverLastName = gbReturnValue
	
	'check any information source is blank
	For Cnt = 1 to gbdicAVtmpObject("Counter")
		 If gbdicAVtmpObject("InformationSource_"&Cnt)=VBNullstring Then
				rc=micFail
				HandleRC rc
				ReportStep 2, "Information Source", "The source should contain a valid value", "The information source is [BLANK] in the Test ware at row: " & Cnt
				AV_AddAccidentOrViolation=rc
				Exit Function
		End If
	Next
	
   'Loop to check the UDR check box
	For Cnt = 1 to gbdicAVtmpObject("Counter")
		'Check if the Source is UDR
		If  trim(gbdicAVtmpObject("InformationSource_"&Cnt)) = "UDR" and UCase(gbdicAVtmpObject("AcciViolDesc_"&Cnt)) = "YES" Then
			'Finds the staus of the UDR check box indicatior
			UDRval = frDriverPage.WebcheckBox("html id:=DriverDetails.undiscDrLicCd").GetRoProperty("checked")
			If  UDRval = 0 Then
				rc=micFail
				HandleRC rc
				ReportStep 2, "UDR Checkbox Status", "Value of UDR Check box", "UDR Checkbox not checked"
				AV_AddAccidentOrViolation = rc
				Exit Function
			Else
				ReportStep 2, "UDR Checkbox Status", "Value of UDR Check box", "UDR Checkbox checked"
			End If
		End If
	Next

	 'Loop for adding Online MVR conditions 
	For Cnt = 1 to gbdicAVtmpObject("Counter")
		'check if MVR condition is avaiable

		If trim(gbdicAVtmpObject("InformationSource_"&Cnt)) = "MVR" Then
			gbMVRFlag = True

			'Click on Update Driver link
			If rc=micPass Then rc = SelectTask("DriverPage","Update Driver")
			If rc=micPass Then rc = WaitForwindow(gbBrowserName,gbApplicationHomePage,"Add Update Driver","")
		'variable again set due to sync issues.
			Set	frAddUpdateDriver = Browser("Browser Unified Desktop").Page("Chordiant Unified Desktop").Frame("Add Update Driver")
			If rc=micPass Then rc = WaitForObject(frAddUpdateDriver.WebElement("Last"))
			If rc=micPass Then rc = ObjectEdit(frAddUpdateDriver, "Last Name", "EnterValue", "", "", "",gbMVRLastName)
			'Fetches the driver name
			firstName = frAddUpdateDriver.WebEdit("First Name").GetROProperty ("value")
			'Re-assigning the updated diver name
			gbDriverName = firstName&" "&gbMVRLastName

			 'Enter Apartment Number 
			If rc=micPass Then rc=ObjectEdit (frAddUpdateDriver, "Apt Number","ReadValue", "","","","")	
			'If gbReturnValue <> VBNullString Then
			If gbReturnValue <> "BLANK" Then
				'Select Apartment type
				If rc=micPass Then rc=ObjectList (frAddUpdateDriver, "UnitType", "ReadValue", "","", "Unit Type","")
				If  gbReturnValue  = "BLANK" Then
					If rc=micPass Then rc=ObjectList (frAddUpdateDriver, "UnitType", "SelectValue", "","", "Unit Type","APT")
				End If
			End If
			
			If rc = micPass Then rc = ObjectButton(frAddUpdateDriver, "OK","Click")

			 'To handle Optional IE popup 
			HandleRepViewPopup vbNullString,"OK"
			If InStr(gbPopupMessageText, "Address was validated by the U.S. Postal Service and corrected")>0 Then
				'Click on ok button in add scree, for second time, if the pop-up has appeared
				If rc=micPass Then rc=ObjectButton(frAddUpdateDriver, "OK", "Click")
			ElseIf	InStr(gbPopupMessageText, "Unit Type")>0 Then
				If rc=micPass Then rc=ObjectButton(frAddUpdateDriver, "OK", "Click")
			ElseIf InStr(gbPopupMessageText, "Driver License Details missing") > 0 Then
				'do nothing
			ElseIf gbPopupMessageText = "BLANK" Then
				'do nothing
			Else
				HandleRC micFail
				ReportStep 2, "Update Driver", "Update Driver with details: " & ReportMsg,"Message on Popup: " & gbPopupMessageText
				AV_UpdateDriver = micFail
				Exit Function
			End If
		
			HandleRepViewPopup "Optional", "OK"
			If InStr(gbPopupMessageText, "Driver License Details missing") > 0 Then
				'do nothing
			ElseIf gbPopupMessageText <> "BLANK" Then
				rc =  micFail
			End If
			
			If rc=micPass Then rc = WaitForwindow(gbBrowserName,gbApplicationHomePage,"DriverPage","")

			'Selects the specified driver from the Driver table
			If rc= micPass Then rc= SearchWebTableRow(frDriverPage.WebTable("Driver Number"), "2" , gbDriverName, "No",True)
			If rc=micPass Then rc= SelectRow(frDriverPage,"Driver Number","","","",gbReturnValue-1)
			'After selecting Driver the screen will gets refreshed. so a static wait is used
			Wait gbObjectSyncTime
				
			'Select License number form table
		    Set RunTimeObject = Description.Create
			RunTimeObject("html tag").Value = "TD"
			RunTimeObject("innertext").Value = gbLicenseNumber
			
			Set WeObj=frDriverPage.WebTable("License").ChildObjects(RunTimeObject)
			'WeObj(0).Click
		    WeObj(0).FireEvent "onclick" 
			WeObj(0).FireEvent "onmouseover"

			'After selecting Driver license screen will gets refreshed. so a static wait is used
			Wait gbObjectSyncTime
			If rc=micPass Then rc = SelectTask("DriverPage","Order Online MVR")
			HandleRepViewPopup "Optional","OK"
			'After hitting Online MVR will refresh the screen. so a static wait is used
			Wait gbObjectSyncTime
			If InStr(1,gbCurrTestCaseName,"Z4AV") <= 0 Then
			   ''assigning loss date when cliams is not attached to the policy.
'				If gbLossDate=VBNullString then
'					 If rc=micPass Then rc= AV_AddOrSubtractTED(gbdicAVtmpObject("OccuranceDate_"&Cnt),gbTermDate)
'						gbLossDate = gbReturnValue
'				End If
				 'Select a Policy Tab
				If rc=micPass Then rc = SelectRepviewTab("PolicyQuoteSummary Tabs",  "Policy")
				If rc=micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"PolicyQuoteSummary Tabs","")
				If rc=micPass Then rc =AcceptTransaction(frPolicyAmendment,"Cancel","")
			
				'Call Dairy function
			    If rc=micPass Then rc =Emulator_diaryRun(gbCurrTestCaseName,"APS",  gbAppRegion,  gbAppUserName,  gbAppUserPassword, gbPolicyNum ,"SCHEDULE;MVR;SURCHARGE")
				'If rc=micPass Then rc =Emulator_diaryRun(gbCurrTestCaseName,"APS",  gbAppRegion,  gbAppUserName,  gbAppUserPassword, gbPolicyNum ,"SCHEDULE;MVR")
          
				 'Retrieve the policy after Accepting Transaction
				If rc=micPass Then rc = SelectTask("PolicyAmendment","Retrieve Policy")
				If rc=micPass Then rc = WaitForObject(frPolicyAmendment.WebElement("Retrieve Policy"))
	
				'Navigates to Driver Page
				 If rc=micPass Then rc = SelectRepviewTab("PolicyQuoteSummary Tabs",  "Driver")
				If rc=micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"DriverPage","")
				If rc=micPass Then rc = WaitForObject(frDriverPage.WebElement("Add New Driver"))
			End if ' end for not Z4AV
		
			'Selects the specified driver from the Driver table
			If rc= micPass Then rc= SearchWebTableRow(frDriverPage.WebTable("Driver Number"), "2" , gbDriverName, "No",True)
			If rc=micPass Then rc= SelectRow(frDriverPage,"Driver Number","","","",gbReturnValue-1)

			'Navigate to Accident and Violation Summary screen
			If rc=micPass Then rc = SelectTask("DriverPage","View Accidents and Violations")
			If rc=micPass Then rc = WaitForwindow(gbBrowserName,gbApplicationHomePage,"Accidents and Violations","")
		Exit For
	 End If
	Next
	
	For Cnt = 1 to gbdicAVtmpObject("Counter")
		If (Trim(gbdicAVtmpObject("InformationSource_"&Cnt)) = "MVR") Then
				If gbLossDate=VBNullString then
					GetFrameData frOverride,"OccuranceDate","Conviction/"
					'Date01-07-2008Conviction/Reinstate DateLocation
					gbLossDate = gbReturnValue
				End If
			If Instr(gbdicAVtmpObject("State"),"CA")>0 and CInt(gbdicAVtmpObject("Points_"&Cnt)) = 2  Then
				If gbdicAVtmpObject("IncidentType_"&Cnt) = "ACCI" Then
					Set RunTimeObject = Description.Create
					RunTimeObject("html tag").Value = "TD"
					RunTimeObject("innertext").Value = gbdicAVtmpObject("AcciViolDesc_"&Cnt)
					Set WeObj=frAccidentsViolations.ChildObjects(RunTimeObject)
					If WeObj.count = 0 Then
						HandleRC micFail
						gbReturnValue = "Acci/Viol Description: "&gbdicAVtmpObject("AcciViolDesc_"&Cnt)&" for the information Source: "&gbdicAVtmpObject("InformationSource_"&Cnt)&" is not present"
						 AV_VerifySourcePoints = micFail
						Exit Function
					End If
					For rowNum =0 to WeObj.count-1
						'Clcik on the web table row corresponding to given acci or viol
						WeObj(rowNum).click
						'Refreshes the driver ditails to the selected driver. so a static wait is used
						Wait gbObjectSyncTime
						'Get Acci/Violation Description
						sourceName= frOverride.WebTable("Driver Name").GetCellData(1,6)
						Wait gbObjectSyncTime
						If  Trim(gbdicAVtmpObject("InformationSource_"&Cnt)) = Trim(sourceName) Then
							'Get the source Points
							pts= frOverride.WebTable("Driver Name").GetCellData(1,4)
							If pts = 1 or pts ="1" Then
								If rc= micPass Then rc = SelectTask("Accidents and Violations","Update Accident or Violation")
								'Wait for page load
								If rc= micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"Add Update Accidents Or Violations","")
								If rc= micPass Then rc = WaitForObject(	frAddAccidentOrViolations.WebElement("DriverName"))
			
								'Enter BIAmount on Add Accident Violation page
								If rc=micPass Then rc=ObjectEdit (frAddAccidentOrViolations, "BI Amount", "EnterValue", "", "" , "", gbdicAVtmpObject("BIAmt_"&Cnt))
						
								'Enter PDAmount on Add Accident Violation page
								If rc=micPass Then rc=ObjectEdit (frAddAccidentOrViolations, "PD Amount", "EnterValue", "", "" , "", gbdicAVtmpObject("PDAmt_"&Cnt))
						
								'Enter CollisionAmount on Add Accident Violation page  
								If rc=micPass Then rc=ObjectEdit (frAddAccidentOrViolations, "Collision Amount", "EnterValue", "", "", "", gbdicAVtmpObject("CollAmt_"&Cnt))
								 'Check BI Reserve check box
								If UCase(gbdicAVtmpObject("BIReserve_"&Cnt)) = "YES" Then
									If rc=micPass Then rc=ObjectChkbox (frAddAccidentOrViolations, "BI Reserve",  "SelectValue", "" , "", "", "ON")
								End If
								'Click the OK button in add accident Screen
								If rc=micPass Then rc=ObjectButton(frAddAccidentOrViolations, "OK", "Click")
								'To handle Optional IE popup 
								HandleRepViewPopup vbNullString,"OK"
								MVRUpdateFlag = True
							End If
						End if
					Next
				End If
			End If
			If (InStr(1,gbCurrTestCaseName,"Z4AV") <= 0) Then
				If gbdicAVtmpObject("IncidentType_"&Cnt) = "SUSP" or gbdicAVtmpObject("IncidentType_"&Cnt) = "DISM" or gbdicAVtmpObject("IncidentType_"&Cnt) = "F/R" or CInt(gbdicAVtmpObject("Points_"&Cnt)) <> 0 Then
					'verify Source and its points
					If rc=micPass Then rc=AV_VerifySourcePoints(Cnt)
				Elseif CInt(gbdicAVtmpObject("Points_"&Cnt)) = 0 Then
					'Verifies Source points from DB2 back end.
				   If rc=micPass Then rc=AV_VerifySourcePointsFromDB2(Cnt, "")
				End If
		   
				'Reporting Variable
				reportVar = "<b>"&"Source: "&gbdicAVtmpObject("InformationSource_"&Cnt)&"; "&gbdicAVtmpObject("IncidentType_"&Cnt)&" Desc: " &gbdicAVtmpObject("AcciViolDesc_"&Cnt)&";"&" Points: "&gbdicAVtmpObject("Points_"&Cnt)&"</b>"
				'Reporting and Error handling  
				If rc <> micPass Then
					HandleRC rc
					ReportStep 2, "Add "&gbdicAVtmpObject("IncidentType_"&Cnt), "Add  "&gbdicAVtmpObject("IncidentType_"&Cnt)&" with the details: "&reportVar, "Unable to add the following details: "&reportVar
					AV_AddAccidentOrViolation = rc
					Exit Function
				Else
					ReportStep 2, "Add "&gbdicAVtmpObject("IncidentType_"&Cnt), "Add  "&gbdicAVtmpObject("IncidentType_"&Cnt)&" with the details to the selected driver:"&reportVar, ""&reportVar&" details has been added Successfully"
				End If
			End if ' end of  not Z4av
		End if ' end of MVR
	Next

	'Loop for adding APS Claims or PLCS Claims
	For Cnt = 1 to gbdicAVtmpObject("Counter")
		'Check if the Source is Claims or PLCS
		If  trim(gbdicAVtmpObject("InformationSource_"&Cnt)) = "Claims" or  trim(gbdicAVtmpObject("InformationSource_"&Cnt)) = "PLCS" Then
			gbClaimsOrPLCSFlag = True
			'Run the Surcharge dairy if MVR is not pressent in the Test case
			If gbMVRFlag= False AND ClaimsDairyRunFlag = False Then
			   'Call Dairy function
			    If rc=micPass Then rc =Emulator_diaryRun(gbCurrTestCaseName,"APS",  gbAppRegion,  gbAppUserName,  gbAppUserPassword, gbPolicyNum ,"MVR;SURCHARGE")
				If rc =micPass Then ClaimsDairyRunFlag = True
				'Navigate to Accident and Violation Summary screen
				If rc= micPass Then rc = SelectTask("DriverPage","View Accidents and Violations")
				If rc=micPass Then rc = WaitForwindow(gbBrowserName,gbApplicationHomePage,"Accidents and Violations","")
			End If
			
'			'Capture the occuranc date for other sources
'			OccuranceDate = frOverride.WebTable("Date").GetCellData( frOverride.WebTable("Date").GetRowWithCellText("Date"),2)
			If InStr(1,gbCurrTestCaseName,"Z4AV") > 0  Then
				'If rc=micPass Then rc=AV_VerifySourcePointsFromDB2(Cnt,"")
			Else
				If gbdicAVtmpObject("InformationSource_"&Cnt) = "Claims" AND Cint(gbdicAVtmpObject("Points_"&Cnt)) = 0 Then
					'Veriry the Claims 0 points from DB2 backend 
					If rc=micPass Then rc=AV_VerifySourcePointsFromDB2(Cnt,"")
				'Veriry the Claims for 2 points in Repview
				ElseIf gbdicAVtmpObject("InformationSource_"&Cnt) = "Claims" AND Cint(gbdicAVtmpObject("Points_"&Cnt)) <> 0 Then
						'verify Source and its points from Repviw
					If rc=micPass Then rc = AV_VerifySourcePoints(Cnt)
				'Veriry the PLCS for any points
				Elseif gbdicAVtmpObject("InformationSource_"&Cnt) = "PLCS" Then
					'Veriry PLCS flag from DB2 backend for any point 
					If rc=micPass Then rc=AV_VerifySourcePointsFromDB2(Cnt,"VerifyPLCSFlag")
					'Veriry the  PLCS 0 points from DB2 backend 
					If gbReturnValue = True and Cint(gbdicAVtmpObject("Points_"&Cnt)) = 0 Then
						If rc=micPass Then rc=AV_VerifySourcePointsFromDB2(Cnt,"")
					Elseif gbReturnValue = True Then
						'verify Source and its points from Repviw for PLCS 2 points
						If rc=micPass Then rc = AV_VerifySourcePoints(Cnt)
					Else
						HandleRC micFail
						ReportStep 2, "Verify PLCS flag in DB2", "Verification of PLCS flag against Z_AV_SERV_SOURCE Column in Z4AV table ", "PLCS flag is not availble in Z4AV table under Z_AV_SERV_SOURCE column"
						AV_AddAccidentOrViolation = micFail
						Exit Function
					End If
				End If
			'End if
			'Reporting Variable
			reportVar = "<b>"&"Source: "&gbdicAVtmpObject("InformationSource_"&Cnt)&"; "&gbdicAVtmpObject("IncidentType_"&Cnt)&" Desc: " &gbdicAVtmpObject("AcciViolDesc_"&Cnt)&";"&" Points: "&gbdicAVtmpObject("Points_"&Cnt)&"</b>"
			If rc <> micPass Then
				HandleRC rc
				ReportStep 2, "Add Accident", "Add  "&gbdicAVtmpObject("IncidentType_"&Cnt)&" with the details: "&reportVar, "Unable to add the following details: "&reportVar
				AV_AddAccidentOrViolation = rc
				Exit Function
			Else
				ReportStep 2, "Add Accident", "Add  "&gbdicAVtmpObject("IncidentType_"&Cnt)&" with the details:"&reportVar, ""&reportVar&" details has been added Successfully"
			End If
		  End if ' End if Z4AV
		End If
	Next
  
  
    'loop for adding simple condtions
	For Cnt = 1 to gbdicAVtmpObject("Counter")

		Select Case gbdicAVtmpObject("InformationSource_"&Cnt)

			Case "Customer admitted","Manual Claim History","Manual MVR", "Override"
				gbSimpleSourceFlag = True
				If (gbClaimsOrPLCSFlag =False) And  (gbMVRFlag = False)  Then
					'Navigate to Accident and Violation Summary screen
					If rc=micPass Then rc = SelectTask("DriverPage","View Accidents and Violations")
					If rc=micPass Then rc = WaitForwindow(gbBrowserName,gbApplicationHomePage,"Accidents and Violations","")
				End If
                'click on Add Accident and Violation Screen link
				If rc= micPass Then rc = SelectTask("Accidents and Violations","Add Accident or  Violation")
				'Wait for page load
				If rc= micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"Add Update Accidents Or Violations","")
				If rc= micPass Then rc = WaitForObject(	frAddAccidentOrViolations.WebElement("DriverName"))
			
				'Select InformationSource
				If gbdicAVtmpObject("InformationSource_"&Cnt) <> "Override" Then
					If rc=micPass Then rc=ObjectList(frAddAccidentOrViolations, "Information Source", "SelectValue", "", "", "",gbdicAVtmpObject("InformationSource_"&Cnt))
				Else
					If rc=micPass Then rc=ObjectList(frAddAccidentOrViolations, "Information Source", "SelectByIndex", "", "", "",1)
				End if
			
				'Information source will refresh contents of other fields (listboxes). so a static wait is used
				Wait gbObjectSyncTime
				
				'Select incident type 
				If rc=micPass Then rc=ObjectList(frAddAccidentOrViolations, "Incident Type", "SelectValue", "", "", "",gbdicAVtmpObject("IncidentType_"&Cnt))
				'Incident type will refresh contents of other fields (listboxes). so a static wait is used
				Wait gbObjectSyncTime
				
				'Select Description
				 If gbdicAVtmpObject("InformationSource_"&Cnt) <> "Override" Then
					If rc=micPass Then rc=ObjectList (frAddAccidentOrViolations, "Accident/Violation Description", "SelectValue", "", "" , "",gbdicAVtmpObject("AcciViolDesc_"&Cnt))
				Else
					If Instr(1,gbdicAVtmpObject("State"),"CA")>0  Then
						itemsList =frAddAccidentOrViolations.WebList("Accident/Violation Description").GetROProperty("all items")
						arrList = Split(itemsList,";")
						For listCount = 0 to Ubound(arrList)
							If InStr(1,gbdicAVtmpObject("AcciViolDesc_"&Cnt),"3-year")>0 AND InStr(1,arrList(listCount),"Three year Major")>0  Then
								frAddAccidentOrViolations.WebList("Accident/Violation Description").Select arrList(listCount)
								Exit For
							End If
							If InStr(1,gbdicAVtmpObject("AcciViolDesc_"&Cnt),"10-year")>0 AND InStr(1,arrList(listCount),"Ten-year Major")>0  Then
								frAddAccidentOrViolations.WebList("Accident/Violation Description").Select arrList(listCount)
								Exit For
							End If
						Next
					End If
					'If rc=micPass Then rc=ObjectList(frAddAccidentOrViolations, "Accident/Violation Description", "SelectByIndex", "", "", "",1)
					'Read the selected Accident or Violation Description
					If rc=micPass Then rc=ObjectList(frAddAccidentOrViolations, "Accident/Violation Description", "ReadValue", "", "", "","")
					gbdicAccViolDescObject(Cnt) = gbReturnValue
				End if
				'Selects the current term
				If rc=micPass Then rc=ObjectList (frAddAccidentOrViolations, "Term Effective Date", "SelectValue", "", "" , "",gbTermDate)
			  
				'error handling for blank occurance date in the test ware
                If gbLossDate <> VbNullString Then
					gbdicAVtmpObject("OccuranceDate_"&Cnt)=gbLossDate
				Elseif gbdicAVtmpObject("OccuranceDate_"&Cnt)<>VbNullString Then 
					'Call a function to calculate Occurance 
					If rc=micPass Then rc= AV_AddOrSubtractTED(gbdicAVtmpObject("OccuranceDate_"&Cnt),gbTermDate)
					gbdicAVtmpObject("OccuranceDate_"&Cnt) = gbReturnValue
				Else
					rc=micFail
					HandleRC rc
					ReportStep 2, "Occurence Date", "The source should contain a valid Occurance date", "The Occurence date is [BLANK] in the Testware row: " & Cnt
					AV_AddAccidentOrViolation=rc
					Exit Function
				End if

				'Enter Occurence Date
				If rc=micPass Then rc=ObjectEdit (frAddAccidentOrViolations, "Occurrence Date", "EnterDate", "", "", "", gbdicAVtmpObject("OccuranceDate_"&Cnt))
			
				If gbLossDate <> VbNullString Then
					'Enter Conviction/ Reinstate Date
					If rc=micPass Then rc=ObjectEdit (frAddAccidentOrViolations, "Conviction/ Reinstate Date", "EnterDate", "", "", "",gbdicAVtmpObject("OccuranceDate_"&Cnt))
				ElseIf  gbdicAVtmpObject("ConvictionDate_"&Cnt) = ""  Then
					'Enter Conviction/ Reinstate Date
					If rc=micPass Then rc=ObjectEdit (frAddAccidentOrViolations, "Conviction/ Reinstate Date", "EnterDate", "", "", "",gbdicAVtmpObject("OccuranceDate_"&Cnt))
				'To handle conviction date for Aging conditions for NY state
				Elseif  UCase(gbApplicableState)="NY" and InStr(1,gbCurrTestCaseName,"AG") > 0 And gbdicAVtmpObject("IncidentType_"&Cnt) = "VIOL" Then
				'Gets the new term date
				If Instr(1,gbdicAVtmpObject("ConvictionDate_"&Cnt),"ESD")>0 Then
					gbNewTermDate = DateAdd("m",6,gbTermDate)
				Elseif Instr(1,gbdicAVtmpObject("ConvictionDate_"&Cnt),"EED")>0 Then
					gbNewTermDate = gbTermDate
				End If
					'To handle Expiry End and Start dates 
					If IsDate(gbNewTermDate) Then 
						tempDate = DateAdd("m",-4,gbNewTermDate)
						transEndDate =DateAdd("d",-1,DateSerial(CInt(DatePart( "yyyy",tempDate)), CInt(DatePart( "m",tempDate)) + 1, 1))
						transStartDate = DateAdd("yyyy",-3,transEndDate)
						If Instr(1,gbdicAVtmpObject("ConvictionDate_"&Cnt),"EED")>0 Then
							tempDate =transEndDate
						Elseif Instr(1,gbdicAVtmpObject("ConvictionDate_"&Cnt),"ESD")>0 Then
							tempDate =transStartDate
						End If
                    Else
						HandleRC micFail
						ReportStep 2,"New Term Effective Date Verification","New Term Date: " &gbNewTermDate,"New Term Effective Date is not a Valid Date"
						AV_AddAccidentOrViolation=micFail
						Exit Function
					End if
					
					If rc=micPass Then rc= AV_AddOrSubtractTED( gbdicAVtmpObject("ConvictionDate_"&Cnt),tempDate)
                    gbdicAVtmpObject("ConvictionDate_"&Cnt)=gbReturnValue
					
					'Enter Conviction/ Reinstate Date
					If rc=micPass Then rc=ObjectEdit (frAddAccidentOrViolations, "Conviction/ Reinstate Date", "EnterDate", "", "", "",gbdicAVtmpObject("ConvictionDate_"&Cnt))
						
				Else
					'Call a function to calculate Conviction date 
					If rc=micPass Then rc= AV_AddOrSubtractTED(gbdicAVtmpObject("ConvictionDate_"&Cnt),gbTermDate)
                    gbdicAVtmpObject("ConvictionDate_"&Cnt) = gbReturnValue
					
					'Enter Conviction/ Reinstate Date
					If rc=micPass Then rc=ObjectEdit (frAddAccidentOrViolations, "Conviction/ Reinstate Date", "EnterDate", "", "", "",gbdicAVtmpObject("ConvictionDate_"&Cnt))
				End If
			
				 If gbdicAVtmpObject("IncidentType_"&Cnt) = "ACCI" Then
					 'Enter BIAmount on Add Accident Violation page
					If rc=micPass Then rc=ObjectEdit (frAddAccidentOrViolations, "BI Amount", "EnterValue", "", "" , "", gbdicAVtmpObject("BIAmt_"&Cnt))
			
					'Enter PDAmount on Add Accident Violation page
					If rc=micPass Then rc=ObjectEdit (frAddAccidentOrViolations, "PD Amount", "EnterValue", "", "" , "", gbdicAVtmpObject("PDAmt_"&Cnt))
			
					'Enter CollisionAmount on Add Accident Violation page  
					If rc=micPass Then rc=ObjectEdit (frAddAccidentOrViolations, "Collision Amount", "EnterValue", "", "", "", gbdicAVtmpObject("CollAmt_"&Cnt))
				End If
					
				'Enter Loss Number
				If gbdicAVtmpObject("InformationSource_"&Cnt) = "Manual Claim History" Then
					'For Manual Claim History Loss Number mandatory , so assign default value(10) if loss number blank in Test data sheet
					If  gbdicAVtmpObject("LossNumber_"&Cnt) = "" Then
						gbdicAVtmpObject("LossNumber_"&Cnt) = 10
					End if
					If rc=micPass Then rc=ObjectEdit (frAddAccidentOrViolations, "Loss Number", "EnterValue","" ,"" , "", gbdicAVtmpObject("LossNumber_"&Cnt))
				End If
				
				'Check BI Reserve check box
				If UCase(gbdicAVtmpObject("BIReserve_"&Cnt)) = "YES" Then
					If rc=micPass Then rc=ObjectChkbox (frAddAccidentOrViolations, "BI Reserve",  "SelectValue", "" , "", "", "ON")
				End If
			
				 If gbdicAVtmpObject("InformationSource_"&Cnt) = "Override" Then
					'Check Override check box
					If rc=micPass Then rc=ObjectChkbox (frAddAccidentOrViolations, "override",  "SelectValue", "" , "", "", "ON")
					 'Select  Adjusted Description
					If rc=micPass Then rc=ObjectList (frAddAccidentOrViolations, "Adjusted Description", "SelectValue", "", "" , "",gbdicAVtmpObject("AcciViolDesc_"&Cnt))
					'Enter Comment
					If rc=micPass Then rc=ObjectEdit( frAddAccidentOrViolations, "Comment",  "EnterValue", "", "", "","Accident/Violation has been overrided")
				End If
				
				'Click the OK button in add accident Screen
				If rc=micPass Then rc=ObjectButton(frAddAccidentOrViolations, "OK", "Click")
				
				'To handle Optional IE popup 
				HandleRepViewPopup vbNullString,"OK"
				Wait 1
				'Verify the Source and corresponding points for the added accident or violation
				If rc = micPass Then rc=AV_VerifySourcePoints(Cnt)

				'Reporting Variable
				reportVar = "<b>"&"Source: "&gbdicAVtmpObject("InformationSource_"&Cnt)&"; "&gbdicAVtmpObject("IncidentType_"&Cnt)&" Desc: " &gbdicAVtmpObject("AcciViolDesc_"&Cnt)&";"&" Points: "&gbdicAVtmpObject("Points_"&Cnt)&"</b>"
				'Error handling
				If rc <> micPass Then
					HandleRC rc
					ReportStep 2, "Add "&gbdicAVtmpObject("IncidentType_"&Cnt), "Add  "&gbdicAVtmpObject("IncidentType_"&Cnt)&" with the details: "&reportVar, "Actual Details added as follows: "&gbReturnValue
					AV_AddAccidentOrViolation = rc
					Exit Function
				Else
					ReportStep 2, "Add "&gbdicAVtmpObject("IncidentType_"&Cnt), "Add  "&gbdicAVtmpObject("IncidentType_"&Cnt)&" with the details to the selected driver:"&reportVar, " Following  details have been added Successfully: "&gbReturnValue
					AV_AddAccidentOrViolation = rc
				End If

		End Select
	Next
	'Verifies total accidents and violations added before renewal with respect to counter
	rCount =frAccidentsViolations.WebTable("Accident or Violation").RowCount
	For ct = 1 to Cint(gbdicAVtmpObject("Counter"))
	   If UCase(gbdicAVtmpObject("InformationSource_"&ct)) = "UDR" and UCase(gbdicAVtmpObject("AcciViolDesc_"&ct)) = "YES"Then
			rCount=rCount+1
		End If 
	Next
	
	For  ct = 1 to gbdicAVtmpObject("Counter") 
		 If (Ucase(gbdicAVtmpObject("InformationSource_"&ct)) = "CLAIMS" OR UCASE(gbdicAVtmpObject("InformationSource_"&ct)) = "PLCS" OR Ucase(gbdicAVtmpObject("InformationSource_"&ct)) = "MVR") AND (Trim(gbdicAVtmpObject("Points_"&ct)) = "0") Then
			 'If gbdicAVtmpObject("IncidentType_"&ct)= "SUSP" or gbdicAVtmpObject("IncidentType_"&ct)= "DISM" OR gbdicAVtmpObject("IncidentType_"&ct)= "F/R" gbdicAVtmpObject("IncidentType_"&ct)= "VIOL" Then
			 If gbdicAVtmpObject("IncidentType_"&ct)= "ACCI" Then
				rCount = rCount+1
			 End If
		End If
	Next
   
	If Cint(gbdicAVtmpObject("Counter")) =(rCount-1) Then
		ReportStep 2, "Verify Acci or Viol count before Renewal", "Expected Acci and Viol count before renewal  ="&"<b>"&gbdicAVtmpObject("Counter")&"</b>", "Successfully verified Acci or Viol count before Renewal"
	Else
		rc=micFail
		HandleRC rc
		ReportStep 2, "Verify Acci or Viol count before Renewal", "Expected Acci and Viol count before renewal  ="&"<b>"&gbdicAVtmpObject("Counter")&"</b>", "Acutal Acci or Viol count before Renewal is "&"<b>"&(rCount-1)&"</b>"
		 AV_AddAccidentOrViolation = rc
	End If
End Function


'################################################################################################################################
'	FUNCTION NAME		: AV_VerifySourcePoints(ByVal Cnt)
'
'	DESCRIPTION			: This function veirfies the specified Accident or Violation for the specified Driver is added successfully or not
'
'	PARAMETERS			: 
'		Cnt									:		data sheet row number for the source for a single test case(i.e Source number for a test case)
 		
'
'	DEPENDENCIES		: (None)
'
' 	RETURN VALUE(S): 
'		micPass	 		: On successful execution of the function
'		micFail	 		: On unsuccessful execution of the function
'
'	ERRORS				: (None)
'
'	AUTHOR				:  Venkatarami Reddy  Gogireddy
'
'	ORIGINAL DATE		: 18th Sept 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY			:	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'03-26-2009							Prashanthi	Nandagiri  			Added the condition to verify "Minor Violation" description change as per SR01277 in MR09-03 release.
'################################################################################################################################
Public Function AV_VerifySourcePoints(ByVal Cnt)
  'Option Explicit
  
	Dim rc, Flag,WeObj,pts,rowNum,RunTimeObject,ChkBoxValue,adjDesc,adjPts,rCount,sourceName
	On Error Resume Next
		Flag= False
		Set frOverride = Browser(gbBrowserName).Page(gbApplicationHomePage).Frame("Accidents and Violations Override")
		Set frAccidentsViolations = Browser(gbBrowserName).Page(gbApplicationHomePage).Frame("Accidents and Violations")
		
	Select Case gbdicAVtmpObject("InformationSource_"&Cnt)
		Case "Override"
			'create a webelement description
			Set RunTimeObject = Description.Create
			RunTimeObject("html tag").Value = "TD"
			RunTimeObject("innertext").Value = gbdicAccViolDescObject(Cnt)
			
			Set WeObj=frAccidentsViolations.ChildObjects(RunTimeObject)
			If WeObj.count = 0 Then
				HandleRC micFail
				gbReturnValue = "Acci/Viol Description: "&gbdicAccViolDescObject(Cnt)&" for the information Source: "&"<b>"&gbdicAVtmpObject("InformationSource_"&Cnt)&"</b>"&" is not present"
				 AV_VerifySourcePoints = micFail
				Exit Function
			End If
			 For rowNum =0 to WeObj.count-1
				'Clcik on the web table row corresponding to given acci or viol
				WeObj(rowNum).Click
				'Refreshes the driver ditails to the selected driver. so a static wait is used
				Wait gbObjectSyncTime

                ChkBoxValue = frOverride.WebTable("Override").ChildItem(1,2,"WebCheckBox",0).GetRoProperty("checked")
                If ChkBoxValue = 1 Then
					'Get the Adjusted Description 
				   adjDesc = frOverride.WebTable("Override").GetCellData(2,2)
					If Trim(gbdicAVtmpObject("AcciViolDesc_"&Cnt)) = Trim(adjDesc) Then
						'Get the Adjusted Points
						adjPts=  frOverride.WebTable("Override").GetCellData(1,4)
                        If CInt(Trim(gbdicAVtmpObject("Points_"&Cnt))) = CInt(Trim(adjPts)) Then
								Flag= True
								Exit For
						End if
					End If
				End If
			Next
			gbReturnValue ="Source: "&"<b>"&gbdicAVtmpObject("InformationSource_"&Cnt)&"</b>; "&gbdicAVtmpObject("IncidentType_"&Cnt)&" Adjusted Desc: " &"<b>"&adjDesc&"</b>;"&" Adjusted Points: "&"<b>"&adjPts&"</b>"
			
		Case "Claims","PLCS","MVR"
			'Gets the row count from the Acci/Viol desc table
			rCount =frAccidentsViolations.WebTable("Accident or Violation").RowCount
	
			For rowNum =1 to rCount-1
				'Clcik on the web table row corresponding to given acci or viol
				If rc=micPass Then rc= SelectRow(frAccidentsViolations,"Accident or Violation","","","",rowNum)
				'Refreshes the driver ditails to the selected driver. so a static wait is used
				Wait gbObjectSyncTime
				'Get Acci/Violation Description
				sourceName= frOverride.WebTable("Driver Name").GetCellData(1,6)
				
				If Trim(gbdicAVtmpObject("InformationSource_"&Cnt)) = Trim(sourceName) or (Trim(sourceName) = "Claim History" and gbdicAVtmpObject("InformationSource_"&Cnt) <> "MVR") Then
					'Get the source Points
				    pts= frOverride.WebTable("Driver Name").GetCellData(1,4)
					 If (CInt(Trim(gbdicAVtmpObject("Points_"&Cnt))) = 0) and (gbdicAVtmpObject("IncidentType_"&Cnt) = "SUSP" or gbdicAVtmpObject("IncidentType_"&Cnt) = "DISM" or gbdicAVtmpObject("IncidentType_"&Cnt) = "F/R") Then
						If pts="" Then
                           Flag= True
							Exit For
						End If
					 End if 
                    'Verification points other than 0 points
					If CInt(Trim(gbdicAVtmpObject("Points_"&Cnt))) = CInt(Trim(pts)) AND CInt(Trim(gbdicAVtmpObject("Points_"&Cnt)))<>0 Then
                            Flag= True
							Exit For
                    End if
				End If
			Next
			gbReturnValue ="Source: "&"<b>"&gbdicAVtmpObject("InformationSource_"&Cnt)&"</b>; "&gbdicAVtmpObject("IncidentType_"&Cnt)&" Points: "&"<b>"&pts&"</b>"
			
		Case "Customer admitted","Manual Claim History","Manual MVR"
			'create a webelement description
			Set RunTimeObject = Description.Create
			RunTimeObject("html tag").Value = "TD"
			RunTimeObject("innertext").Value = gbdicAVtmpObject("AcciViolDesc_"&Cnt)
			'Creates child object for WebElements in a table cell 
			'Set WeObj=Browser("Browser Unified Desktop").Page("Chordiant Unified Desktop").Frame("Accidents and Violations").WebTable("Accident or Violation").ChildObjects(RunTimeObject)
			Set WeObj=frAccidentsViolations.ChildObjects(RunTimeObject)
			
			If WeObj.count = 0 Then
                If  RunTimeObject("innertext").Value = "Minor Violation" Then
					RunTimeObject("innertext").Value = gbdicAVtmpObject("AcciViolDesc_"&Cnt) & " - Non-chargeable Same day Acc"
					Set WeObj=frAccidentsViolations.ChildObjects(RunTimeObject)
					If WeObj.count = 0 Then
						HandleRC micFail
						gbReturnValue = "Acci/Viol Description: "&gbdicAVtmpObject("AcciViolDesc_"&Cnt)&" for the information Source: "&gbdicAVtmpObject("InformationSource_"&Cnt)&" is not present"
						AV_VerifySourcePoints = micFail
						Exit Function
					End If
				End If
			End If
			
			For rowNum =0 to WeObj.count-1
				'Clcik on the web table row corresponding to given acci or viol
				WeObj(rowNum).click
				'Refreshes the driver ditails to the selected driver. so a static wait is used
				Wait gbObjectSyncTime
				
				'Get Acci/Violation Description
                sourceName= frOverride.WebTable("Driver Name").GetCellData(1,6)
				If  sourceName ="" Then
					If instr(1,frOverride.WebTable("Driver Name").GetRoProperty("innertext"),gbdicAVtmpObject("InformationSource_"&Cnt))>0 Then
						sourceName=gbdicAVtmpObject("InformationSource_"&Cnt)
					End If
				End If
				If  Trim(gbdicAVtmpObject("InformationSource_"&Cnt)) = Trim(sourceName) Then
					'Get the source Points
					pts= frOverride.WebTable("Driver Name").GetCellData(1,4)
					If Instr(1,RunTimeObject("innertext").Value,"Minor Violation - Non-chargeable Same day Acc") Then
						pts = CInt(Trim(gbdicAVtmpObject("Points_"&Cnt)))
					End If
					
					If CInt(Trim(gbdicAVtmpObject("Points_"&Cnt))) = 0 Then
						If pts="" Then
                           Flag= True
							Exit For
						End If
					Else
						'Verification points other than 0 points
						If pts <> "" Then pts = CInt(Trim(pts))
						If CInt(Trim(gbdicAVtmpObject("Points_"&Cnt))) = pts Then
                            Flag= True
							Exit For
						 End If
					End if
				End If
			Next
			gbReturnValue = "Source: "&"<b>"&gbdicAVtmpObject("InformationSource_"&Cnt)&"</b>; "&gbdicAVtmpObject("IncidentType_"&Cnt)&" Desc: " &"<b>"&gbdicAVtmpObject("AcciViolDesc_"&Cnt)&"</b>;"&" Points: "&"<b>"&pts&"</b>"
	End Select

	If Flag= False  Then
		AV_VerifySourcePoints=micFail
	Else
	   AV_VerifySourcePoints = micPass
	End If   
	   
End Function

''################################################################################################################################
'	FUNCTION NAME		: AV_VerificationAfterRenewal()
'
'	DESCRIPTION			: This function verifies the specified Accident or Violation source points after renew the Policy
'
'	PARAMETERS			: 
'											:		(None)
 		
'
'	DEPENDENCIES		: (None)
'
' 	RETURN VALUE(S): 
'		micPass	 		: On successful execution of the function
'		micFail	 		: On unsuccessful execution of the function
'
'	ERRORS				: (None)
'
'	AUTHOR				:  Gopi Chand T
'
'	ORIGINAL DATE		: 22th Sept 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY			:	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
' 30 Apr 2009					Prashanthi Nandagiri	Updated code to navigate to policy tab
'14 May 2009				Prashanthi Nandagiri	Updated code to implement change as per TDR18838
'29 May 2009				Prashanthi Nandagiri    Declared variables ACCInfoSource, VIOLInfoSource
'25 Jun 2009  				Prashanthi Nandagiri	Updated  code to verify SDIP and NGD points for all funcitonalities for CA state
'25 Jun 2009  				Prashanthi Nandagiri	Updated  code to verify Driver Record points for all funcitonalities other than CA state
'14 Jul 2009  				Prashanthi Nandagiri	Updated  IF condition for verifying the code fr minor violation as per SR19664
'################################################################################################################################

Public Function AV_VerificationAfterRenewal()
  
	Dim rc, Flag, ctr, SafetyRecordPts, NGDPts,strTotal,DrivingRecordPts,countAfterRenewal,rCount,ct, DicAVtmpObject, Var, ACCIFlag, VIOLFlag, ACCInfoSource, VIOLInfoSource
	Dim ACCIDescription, VIOLDescription
	On Error Resume Next
	countAfterRenewal=0
	SafetyRecordPts=""
	NGDPts=""
	DrivingRecordPts=""
	ACCIFlag = False
	VIOLFlag = False

	Set DicAVtmpObject = CreateObject("Scripting.Dictionary")
	Set frAccidentsViolations = Browser(gbBrowserName).Page(gbApplicationHomePage).Frame("Accidents and Violations")
	
	rc = ReportStep(1,"Verification of Source Points afeter Renewal","","")
	
	'Retrieve the policy after renewal
	If rc=micPass Then rc = SelectTask("PolicyAmendment","Retrieve Policy")
	If rc=micPass Then rc = WaitForObject(frPolicyAmendment.WebElement("Retrieve Policy"))

	'Check whether policy is renewed or not
	If gbPopupMessageText = VbNullString Then
		HandleRC = micFail
		AV_VerificationAfterRenewal = micFail
		ReportStep 2, "Verify Policy is Renewed", "Verify the policy is renewd after Dairy Run", " Policy is NOT Renewed after Renewal Dairy run"			
		Exit Function
	End If

	'Navigate to Driver screen
	If rc=micPass Then rc = SelectRepviewTab("PolicyQuoteSummary Tabs",  "Driver")
	If rc=micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"DriverPage","")
	If rc=micPass Then rc = WaitForObject(frDriverPage.WebElement("Add New Driver"))

	
	'Refreshes the driver ditails to the selected driver. so a static wait is used
	 Wait gbObjectSyncTime
	 
    'Selects the specified driver from the Driver table
'	frDriverPage.WebTable("Driver Number").HighLight

	frDriverPage.WebTable("Driver Number").Click
	'Refreshes the driver ditails to the selected driver. so a static wait is used
	 Wait gbObjectSyncTime
	 
	If rc= micPass Then rc= SearchWebTableRow(frDriverPage.WebTable("Driver Number"),"2",gbDriverName,"No",True)
    If rc=micPass Then rc= SelectRow(frDriverPage,"Driver Number","","","",gbReturnValue-1)

	'Refreshes the driver ditails to the selected driver. so a static wait is used
	Wait gbObjectSyncTime
	
    'Gets the innter text for the driver page frame
	strTotal = frDriverPage.GetROProperty ("innertext")
	'Get the value of Safety Record Pts
	If Instr(1,strTotal,"Safety Record Pts")>0 And UCase(gbdicAVtmpObject("State")) = "CA" Then
		If rc=micPass Then rc= getFinalDriverPoints(strTotal,"Safety Record Pts")
        SafetyRecordPts = Trim(gbReturnValue)
	 End If	
	 
	'Get the value of NGD Pts
	 If Instr(1,strTotal,"NGD Pts")>0 And UCase(gbdicAVtmpObject("State")) = "CA" Then
		If rc=micPass Then rc= getFinalDriverPoints(strTotal,"NGD Pts")
        NGDPts = Trim(gbReturnValue)
	 End If	

	'Get the value of Driving Record Pts
	 If Instr(1,strTotal,"Driving Record Pts")>0 And UCase(gbdicAVtmpObject("State")) <> "CA" Then
		If rc=micPass Then rc= getFinalDriverPoints(strTotal,"Driving Record Pts")
        DrivingRecordPts = Trim(gbReturnValue)
	 End If	
    
	 'if the testcase Id contains "DRP"
		'If instr(1, gbdicAVtmpObject("TestCaseID"), "DRP")>0 Or  instr(1, gbdicAVtmpObject("TestCaseID"), "FG")>0Then
			If UCase(gbdicAVtmpObject("State")) <> "CA" Then
				'if the points displayed in the application are equal to those from the dictionary object
				If DrivingRecordPts = gbdicAVtmpObject("FinalDrivingSafetyRecordPoints_1") Then
					ReportStep 2, "Verify Fianl Driver record points" ,"Expected Driver Record Points are "&"<b>"&gbdicAVtmpObject("FinalDrivingSafetyRecordPoints_1")&"<b>","Final Driver Record points after the renewal are matched with Expected value: "&"<b>"&DrivingRecordPts&"<b>"
					If instr(1, gbdicAVtmpObject("TestCaseID"), "DRP")>0 Then
						AV_VerificationAfterRenewal=micPass
						If rc = micPass Then rc = SelectRepViewTab("PolicyQuoteSummary Tabs","Policy")
						Exit Function
					End If
				Else
					rc = micFail
					HandleRC rc
					ReportStep 2, "Verify Fianl Driver record points" ,"Expected Driver Record Points are "&"<b>"&gbdicAVtmpObject("FinalDrivingSafetyRecordPoints_1")&"<b>","Final Driver Record points after the renewal are not matched with Expected value: "&"<b>"&DrivingRecordPts&"<b>"
					AV_VerificationAfterRenewal=rc
					Exit Function
				End If 
			Else
				'if the points displayed in the application are equal to those from the dictionary object
				If SafetyRecordPts = gbdicAVtmpObject("FinalDrivingSafetyRecordPoints_1") AND  NGDPts = gbdicAVtmpObject("FinalDriverNGDPts_1") Then
					ReportStep 2, "Verify Fianl Safety record points and NGD points for CA" ,"Expected " & "<b>" & "Safety Record Points are " & gbdicAVtmpObject("FinalDrivingSafetyRecordPoints_1")&"<BR>" & "NGD Points are " & gbdicAVtmpObject("FinalDriverNGDPts_1"),"Final Safety Record points after the renewal are matched with Expected value: "&"<BR>" & "<b>" &"Safety Record Pts are: " & SafetyRecordPts & "<BR>" &"<b>" & "NGD Points are:" & NGDPts
					If instr(1, gbdicAVtmpObject("TestCaseID"), "DRP")>0 Then
						AV_VerificationAfterRenewal=micPass
						If rc = micPass Then rc = SelectRepViewTab("PolicyQuoteSummary Tabs","Policy")
						Exit Function
					End If
				Else
					rc = micFail
					HandleRC rc
					ReportStep 2, "Verify Fianl Safety record points and NGD points for CA" ,"Expected " & "<b>" & "Safety Record Points are " & gbdicAVtmpObject("FinalDrivingSafetyRecordPoints_1")&"<BR>" & "NGD Points are " & gbdicAVtmpObject("FinalDriverNGDPts_1"),"Final Safety Record points after the renewal are not matched with Expected value: "&"<BR>" & "<b>" &"Safety Record Pts are: " & SafetyRecordPts & "<BR>" &"<b>" & "NGD Points are:" & NGDPts
					AV_VerificationAfterRenewal=rc
					Exit Function
				End If 
			End If 									   
       'End If

	   Var = 1
		'Navigate to the View Accidents and Violations page
	   If rc = micPass Then rc =SelectTask ("DriverPage","View Accidents and Violations")
	   ' counts the number of sources carry forwarded	
		 For ctr= 1 to gbdicAVtmpObject("Counter")
			 If Ucase(gbdicAVtmpObject("ExpectedResult_"&ctr)) = "YES" Then
		 		countAfterRenewal=countAfterRenewal+1
				DicAVtmpObject("IncidentType_"&Var) = gbdicAVtmpObject("IncidentType_"&ctr)
				DicAVtmpObject("AcciViolDesc_"&Var) = gbdicAVtmpObject("AcciViolDesc_"&ctr)
				DicAVtmpObject("InformationSource_"&Var) = gbdicAVtmpObject("InformationSource_"&ctr)
				Var= Var +1
			End If
		 Next
		 
		'verify only the correct number of acci or viol are carry forwarded after renewal
		rCount =frAccidentsViolations.WebTable("Accident or Violation").RowCount
		'verify for backend data newly added
			For  ct = 1 to gbdicAVtmpObject("Counter") 
				 If (Ucase(gbdicAVtmpObject("InformationSource_"&ct)) = "CLAIMS" OR UCASE(gbdicAVtmpObject("InformationSource_"&ct)) = "PLCS" OR Ucase(gbdicAVtmpObject("InformationSource_"&ct)) = "MVR") And gbdicAVtmpObject("IncidentType_"&ct) = "ACCI" Then
					If (Ucase(gbdicAVtmpObject("ExpectedResult_"&ct)) = "YES") AND (Trim(gbdicAVtmpObject("Points_"&ct)) = "0") Then
						rCount = rCount+1
					End If
                End If
			Next
		If countAfterRenewal = rCount-1 Then
			ReportStep 2, "Verify Acci or Viol count After Renewal", "Verify Acci and Viol count after renewal  ="&"<b>"&countAfterRenewal&"</b>", "Successfully Verified Acci or Viol count after Renewal"			
		Else
			rc=micFail
			HandleRC rc
            ReportStep 2, "Verify Acci or Viol count After Renewal", "Verify Acci and Viol count after renewal[Expected] ="&"<b>"&countAfterRenewal&"</b>", "Acutal Acci or Viol count after Renewal is "&"<b>"&(rCount-1)&"</b>"
			AV_VerificationAfterRenewal = rc
			Exit Function
		End If

	 If  Instr(1,gbCurrTestCaseName,"SAV")>0 Then
		 For var=1 to DicAVtmpObject.count
			If  DicAVtmpObject("IncidentType_"&Var) = "ACCI" Then
				ACCInfoSource = DicAVtmpObject("InformationSource_"&Var)
				ACCIDescription = DicAVtmpObject("AcciViolDesc_"&Var)
				ACCIFlag = True
			End If

			If  DicAVtmpObject("IncidentType_"&Var) = "VIOL" Then
				VIOLInfoSource = DicAVtmpObject("InformationSource_"&Var)
				VIOLDescription = DicAVtmpObject("AcciViolDesc_"&Var)
				VIOLFlag = True
			End If
		 Next

		If UCase(ACCInfoSource) = UCase(VIOLInfoSource) And Instr(1,VIOLDescription,"Minor Violation") > 0 Then
			'do nothing
		Elseif UCase(ACCInfoSource)  = "OVERRIDE" Then
			For Var=1 to gbdicAVtmpObject("Counter")
				If  DicAVtmpObject("IncidentType_"&Var) = "VIOL" and Instr(1,DicAVtmpObject("AcciViolDesc_"&Var),"Minor Violation") Then
					'do nothing
				End If
			Next
		Else
			 If  ACCIFlag = True And VIOLFlag = True Then
			 For Var=1 to gbdicAVtmpObject("Counter")
				If DicAVtmpObject("IncidentType_"&Var) = "VIOL" And (Instr(1,DicAVtmpObject("AcciViolDesc_"&Var),"Major Violation") > 0 OR (Instr(1,DicAVtmpObject("AcciViolDesc_"&Var),"Minor Violation") > 0 AND ( Instr(1,DicAVtmpObject("AcciViolDesc_"&Var),"0-50%") > 0 OR Instr(1,DicAVtmpObject("AcciViolDesc_"&Var),"0-66%") > 0  ))) And  Instr(1,DicAVtmpObject("AcciViolDesc_"&Var),"Non-Chargeable") <= 0 AND Instr(1,DicAVtmpObject("AcciViolDesc_"&Var),"Non-chargeable") <= 0 Then
					For ctr= 1 to gbdicAVtmpObject("Counter")
						If Ucase(gbdicAVtmpObject("ExpectedResult_"&ctr)) = "YES" AND gbdicAVtmpObject("IncidentType_"&ctr) = "ACCI"  And (Instr(1,gbdicAVtmpObject("AcciViolDesc_"&ctr),"At Fault Accident") > 0 OR Instr(1,gbdicAVtmpObject("AcciViolDesc_"&ctr),"At fault Accident") > 0) Then
							If  gbdicAVtmpObject("InformationSource_"&ctr) = "Override" Then
								gbdicAVtmpObject("AcciViolDesc_"&ctr) = "Not At Fault Accident"
							Else
								gbdicAVtmpObject("AcciViolDesc_"&ctr) = "Not At Fault accident"
							End If
							gbdicAVtmpObject("Points_"&ctr) = "0"
							Exit For
						End if
					Next
				End If
			 Next
		 End If
	End If	 
End If


		'To check if the Expected result is "YES"  for verification of that source and their points
		For ctr= 1 to gbdicAVtmpObject("Counter")
			 If Ucase(gbdicAVtmpObject("ExpectedResult_"&ctr)) = "YES" Then

				If (gbdicAVtmpObject("InformationSource_"&ctr) = "Claims" or gbdicAVtmpObject("InformationSource_"&ctr) = "MVR") AND Cint(gbdicAVtmpObject("Points_"&ctr)) = 0 Then
					'Veriry the Claims 0 points from DB2 backend 
					If rc=micPass Then rc=AV_VerifySourcePointsFromDB2(ctr,"")
				'Veriry the Claims for 2 points in Repview
				ElseIf gbdicAVtmpObject("InformationSource_"&ctr) <> "PLCS" Then
						'verify Source and its points from Repviw
					If rc=micPass Then rc = AV_VerifySourcePoints(ctr)
				'Veriry the PLCS for any points
				Elseif gbdicAVtmpObject("InformationSource_"&ctr) = "PLCS" Then
					'Veriry PLCS flag from DB2 backend for any point 
					If rc=micPass Then rc=AV_VerifySourcePointsFromDB2(ctr,"VerifyPLCSFlag")
					'Veriry the  PLCS 0 points from DB2 backend 
					If gbReturnValue = True and Cint(gbdicAVtmpObject("Points_"&ctr)) = 0 Then
						If rc=micPass Then rc=AV_VerifySourcePointsFromDB2(ctr,"")
					Elseif gbReturnValue = True Then
						'verify Source and its points from Repviw for PLCS 2 points
						If rc=micPass Then rc = AV_VerifySourcePoints(ctr)
					Else
						ReportStep 2, "Verify PLCS flag in DB2", "Verification of PLCS flag against Z_AV_SERV_SOURCE Column in Z4AV table ", "PLCS flag is not availble in Z4AV table under Z_AV_SERV_SOURCE column"
						AV_VerificationAfterRenewal = rc
						Exit Function
					End If
				End If
				
				If rc = micPass Then
                    ReportStep 2, "Verify Source  Points After Renewal", "Verify Information Source="&"<b>"&gbdicAVtmpObject("InformationSource_"&ctr)&"</b>"&" and Points= "&"<b>"&gbdicAVtmpObject("Points_"&ctr)&"</b>", "Successfully Verified the Source and its Points"
				Else
					HandleRC rc
					ReportStep 2, "Verify Source  Points After Renewal", "Verify Information Source="&"<b>"&gbdicAVtmpObject("InformationSource_"&ctr)&"</b>"&" and Points= "&"<b>"&gbdicAVtmpObject("Points_"&ctr)&"</b>", "Verification of Accident/Violation Points after the renewal are NOT matched"& "<br>"&"Actual Values are: "&"<b>"&gbReturnValue&"</b>"
					AV_VerificationAfterRenewal = rc
					Exit Function
				End If
			End If
		 Next
        
		'Clicks on "OK" button on Accidents Summary Screen
		If rc = micPass Then rc = ClickOnAccidentViolationButton()

		If rc = micPass Then rc = SelectRepViewTab("PolicyQuoteSummary Tabs","Policy")
	   
	AV_VerificationAfterRenewal = rc

End Function


''################################################################################################################
'	FUNCTION NAME		: getFinalDriverPoints(ByVal strTotal,ByVal PointsType)
'
'	DESCRIPTION		: This function retrieves the final driver points for a specific driver.
'
'	PARAMETERS		: strTotal: This is the driver frame innertext
'				  PointsType: This specifies the type of driver points say NGD Pts or Driving Record Pts or Safety Record Pts.	
				
'					
'	DEPENDENCIES		: (None)
'
' 	RETURN VALUE(S)		:

'		gbReturnValue	:On successful Execution this variable contains the new Term Effective date which matches the Criteria.
'		micPass	 	:On successful execution of the function
'		micFail	 	:On unsuccessful execution of the function
'
'	ERRORS			: (None)
'
'	AUTHOR			: Gopi Chand Tadiboyina
'
'	ORIGINAL DATE		: Sep 23  2008

''################################################################################################################

Public Function getFinalDriverPoints(ByVal strTotal,ByVal PointsType)
	Dim Points,pos,strSub,ch,itr
	On Error Resume Next
		Points =""
		pos = Instr(1,strTotal,PointsType)
		strSub = Mid(strTotal,(pos+Len(PointsType)),2)
		For itr= 1 to 2
			ch = mid(strSub,itr,1)
			If IsNumeric(ch) Then
				Points = Points&ch
			End If
		Next
        gbReturnValue=Points
		getFinalDriverPoints=micPass
End Function

'################################################################################################################
'	FUNCTION NAME		: AV_AddOrSubtractTED(ByVal TEDString,ByVal TED)
'
'	DESCRIPTION		: This function adds or subtracts days from Term Effective date depending on the criteria.
'
'	PARAMETERS		: TEDString: This is a string with required Criteria ex:- "TED-3years+1day"
'				  TED: This is a term Effective date.	
				
'					
'	DEPENDENCIES		: (None)
'
' 	RETURN VALUE(S)		:

'		gbReturnValue	:On successful Execution this variable contains the new Term Effective date which matches the Criteria.
'		micPass	 	:On successful execution of the function
'		micFail	 	:On unsuccessful execution of the function
'
'	ERRORS			: (None)
'
'	AUTHOR			: Bharadwaj Tallapragada
'
'	ORIGINAL DATE		: Sep 23  2008

 '################################################################################################################
Public Function AV_AddOrSubtractTED(ByVal TEDString,ByVal TED)
	Dim k,i,Charset,Numberset,c,Numbers,months,days
	On Error Resume Next
	
	If not isdate(TED) Then
		ReportStep 2, "Date Format", "Term Effective date should have proper format" , "Term  Effective date format is improper"
        AV_AddorSubtractTED=micFail
		Exit Function
	End If
	
	'to handle new term effective date for Aging

	 If instr(1,UCase(TEDString),UCase("NTED"))>0 Then
			TED = DateAdd("m", 6, TED)
	End If
	
	For i=1 to len(TEDString)
		k=mid(TEDString,i,1)
		
		'removes all the characters except +,-,numerics.
		If k="+" or k="-" or isNumeric(k) Then
			Charset= Charset & k
		End If
	Next

	For i=1 to len(Charset)
		k=mid(Charset,i,1)
		If not isNumeric(k) Then
			Numberset=Numberset & k
		End If
	Next
	c=replace (Charset,"+","*")
	c=trim(replace (c,"-","*"))
	Numbers=Split(c, "*", -1, 1)
	months=1
	days=1

	For i=1 to len(Numberset)
		k=mid(Numberset,i,1)
		If i=1  Then
			If instr(1,UCase(TEDString),UCase("Year"))>0 Then
				months=0
				Select Case k
					Case "+"
						TED = DateAdd("yyyy", Numbers(1), TED)
					Case "-"
						TED = DateAdd("yyyy", -Numbers(1), TED)
				End Select

				''code added to handle months

				Else
				If instr(1,UCase(TEDString),UCase("Month"))>0 Then
					months=1
					Select Case k
						Case "+"
							TED = DateAdd("m", Numbers(1), TED)
						Case "-"
							TED = DateAdd("m", -Numbers(1), TED)
					End Select
				Else
					Select Case k
						Case "+"
							TED = DateAdd("d", Numbers(1),TED)
						Case "-"
							TED = DateAdd("d", -Numbers(1), TED)
					End Select
			End If
		End if
	End If

	If i=2  Then
		If instr(1,UCase(TEDString),UCase("Month"))>0 and months=0 Then
			days=0
			Select Case k
				Case "+"
					TED = DateAdd("m", Numbers(2), TED)
				Case "-"
					TED = DateAdd("m", -Numbers(2), TED)
			End Select

		Else
			days=1
			Select Case k
				Case "+"
					TED = DateAdd("d", Numbers(2),TED)
				Case "-"
					TED = DateAdd("d", -Numbers(2), TED)
			End Select
		End If
	End if

	If i=3 Then
		If days=0 Then
			Select Case k
				Case "+"
					TED = DateAdd("d", Numbers(3),TED)
				Case "-"
					TED = DateAdd("d", -Numbers(3), TED)
			End Select
		End If
	End If

Next
	rc=CDateToString(TED, "MM-DD-YYYY")
	If rc <>micPass  Then
		AV_AddorSubtractTED=micFail
		ReportStep 2, "Term Effective Date", "Term Effective date should be generated" , "Unable to generate Term Effective date"
	Else
		AV_AddorSubtractTED=micPass
	End If
	
End Function

''################################################################################################################
'	FUNCTION NAME		: ConnectToDB2()
'
'	DESCRIPTION		: This function is used to connect to DB2 server.
'
'	PARAMETERS		:None
'				  
'					
'	DEPENDENCIES		: (None)
'
' 	RETURN VALUE(S)		:

'		
'		micPass	 	:On successful execution of the function
'		micFail	 	:On unsuccessful execution of the function
'
'	ERRORS			: (None)
'
'	AUTHOR			: Bharadwaj Tallapragada
'
'	ORIGINAL DATE		: Sep 21 2008

'################################################################################################################

Public Function ConnectToDB2()
	
	On Error Resume Next
	
	Set AV_Connection = CreateObject("ADODB.Connection")
   ' AV_Connection.Open "PROVIDER=IBMDADB2;DATA SOURCE=" & ServerName & ";USER ID=" & UserName & ";PASSWORD=" & Password & ";"
	AV_Connection.Open gbDB2ConnectionSring
	If Err.Number <> micPass Then
		ErrDescription = "Unable to connect to database " & err.description
		ConnectToDB2= micFail
	Else
		ConnectToDB2 = micPass
	End If
End Function

''################################################################################################################################
'	FUNCTION NAME			: AV_TestDataCreation()
'
'	DESCRIPTION				: This function creates the data and append it to the testware
'
'   PARAMETERS				: 

'	DEPENDENCIES			: (None)
'   
' 	RETURN VALUE(S): 
'		micPass	 			: On successful execution of the function
'		micFail	 			: On unsuccessful execution of the function
'
'	ERRORS					: (None)
'
'	AUTHOR					: Prashanthi Nandagiri
'
'	ORIGINAL DATE			: Sep 22 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'   
'
'################################################################################################################################
Public Function AV_TestDataCreation()
	Dim rc, Flag, ErrorFlag, ErrorMessage, TestCaseCount, TestCaseIteration, EffectiveDateOption, SheetName,ClaimsFlag, MVRFlag, PLCSFlag, NoOfAmmends, Cnt, InformationSource
	Dim AmendmentType, RowID,testCaseType,claimPoints,state

	On Error Resume Next

	'Get test case count
	TestCaseCount  = Datatable.GetSheet(gbTestLabName).GetRowCount

	'Iterate thru the test cases
	For TestCaseIteration =1 To TestCaseCount
		Flag = False
		ErrorFlag=False
		ErrorMessage="Unable to execute test case."
		'Err.Clear
		gbTestCaseStatus=micPass
	
		'Get test case details
		Datatable.GetSheet(gbTestLabName).SetCurrentRow TestCaseIteration
		gbCurrTestCaseName = Datatable.Value("TestCaseID", gbTestLabName)
		gbCurrTestCaseDesc = vbNullString
		gbCurrTestCaseDesc = gbCurrTestCaseDesc & "<BR><b>" & Trim(Datatable.Value("TestCaseDescription", gbTestLabName))
		gbPolicyNum = Trim(Datatable.GetSheet(gbTestLabName).GetParameter("PolicyNo").Value)
		EffectiveDateOption = "Any Date"
	
		If Ltrim(rtrim(gbCurrTestCaseName)) = vbNullString Then Exit For

		'Condition to check which functionality sheet needs to be selected
		 If InStr(1,gbCurrTestCaseName,"FG") > 0  Then
			SheetName = "Forgiveness"
		ElseIf InStr(1,gbCurrTestCaseName,"DUP") > 0  Then
			SheetName = "PLCS Dup Same Day Test Data"
		ElseIf InStr(1,gbCurrTestCaseName,"DIFF") > 0  Then
			SheetName = "PLCS Dup Diff Day Test Data"
		ElseIf InStr(1,gbCurrTestCaseName,"PLCS") > 0  Then
			SheetName = "PLCS"
		ElseIf InStr(1,gbCurrTestCaseName,"Z4AV") > 0  Then
			SheetName = "Z4AV"
		Else
			SheetName = "Rating Hierarchy"
		End If

		Datatable.GetSheet(SheetName).SetCurrentRow AV_GetTestScriptRow(SheetName)
		'Error handling
		If Err.Number <> micPass Then
			ErrorFlag = True
			ErrorMessage = ErrorMessage & ". Test case details missing in TestScript sheet of TestWare"
			Err.Clear
		End If

		If ErrorFlag <> True Then
				NoOfAmmends = Datatable.GetSheet(SheetName).GetParameter("Counter")
				state = Datatable.GetSheet(SheetName).GetParameter("State")
				testCaseType =Datatable.GetSheet(SheetName).GetParameter("TestCaseType")
                ClaimsFlag = False
				MVRFlag = False
				PLCSFlag = False
				For Cnt = 1 to NoOfAmmends
					InformationSource = Datatable.GetSheet(SheetName).GetParameter("InformationSource")
					If  InformationSource = "Claims" Then
						 ClaimsFlag = True
						 claimPoints = Datatable.GetSheet(SheetName).GetParameter("Points")
					Elseif InformationSource = "MVR" Then
						 MVRFlag = True
					Elseif InformationSource = "PLCS" Then
						 PLCSFlag = True
						 claimPoints = Datatable.GetSheet(SheetName).GetParameter("Points")
					End If
					DataTable.GetSheet(SheetName).SetNextRow()
				Next
				
					If MVRFlag = True Then
						 DataTable.Value("MVR",gbTestLabName)= "Yes"
					Else
						 DataTable.Value("MVR",gbTestLabName)= "No"
					End If
	
					If ClaimsFlag = True Then
						 DataTable.Value("Claims",gbTestLabName)= "Yes"
					Else
						 DataTable.Value("Claims",gbTestLabName)= "No"
					End If
		
					If PLCSFlag = True Then
						 DataTable.Value("PLCS",gbTestLabName)= "Yes"
					Else
						 DataTable.Value("PLCS",gbTestLabName)= "No"
					End If
					
					If state <> ""  Then
						DataTable.Value("State",gbTestLabName) = state
					End If
					If testCaseType <> ""  Then
						DataTable.Value("TestCaseType",gbTestLabName) = testCaseType
					End If
					
					If ClaimsFlag = True or PLCSFlag = True Then
						DataTable.Value("Status",gbTestLabName) = claimPoints
					End If
			
		'End If
	Else
		'Start Test case report
			StartTestCaseReport
			HandleRC micFail
			ReportStep 1, gbCurrTestCaseName, "Execute the test case", ErrorMessage
			'	Complete test case leve report
			EndTestCaseReport	
	End If
	'Remove all the keys from the dictionalry object
	 gbdicAVtmpObject.RemoveAll
Next
'
''Datatable.Export(gbServerPath & "Applications\" & gbApplicationName & "\Testware\" & "AVSTestware.xls")
'DataTable.ExportSheet gbServerPath & "Applications\" & gbApplicationName & "\Testware\" & "AVSTestware.xls","AccidentsViolations"

AV_TestDataCreation = rc
End Function
'################################################################################################################################
'	FUNCTION NAME		: PrepareMVRData() 
'	DESCRIPTION			:  Prepates OnLine MVR data for loading
'	PARAMETERS			: (None)'			
'	DEPENDENCIES		: (None)'    
' 	RETURN VALUE(S)		: (None)'
'	ERRORS				: (None)'
'	AUTHOR				:   Kiran Batchu
'	ORIGINAL DATE		: 
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
' 18-Apr-2009				Prashanthi Nandagiri	Added to code to update MVRLastName and LicenseNumber in AVS Testware when more than one MVR condition present
'05-May-2009			Prashanthi Nandagiri	 Added code to enter data in State Violation Code column when AVSPoints > 0
'24 June 2009			Prashanthi Nandagiri	Included AZ state in the condition for entering data in State Violation Code column when AVSPoints > 0
'30 June 2009   		Prashanthi Nandagiri	Added  code to clear any existing contents in MVR tool  before preparing MVR Data
'-----------------------------------------------------------------------------------------------------------------------
Public Function  PrepareMVRData()

	Dim rc, ErrorFlag, ErrorMessage,EXcelFilePath,EXcelSheetName,TestCaseColumnName,TestCaseCount,TestCaseIteration,AVDesc,AVPoints,Driverinfo,ResultPath
	Dim OccuranceDate,dicTestLab,ParamCount,IndexValue,ParamName,MVRFlag,WithClaimsFlag,SourceCount,iteration,currFlag,occurDate,SheetName,convcDate
	Dim tempDate,transEndDate,transStartDate, Var
	On Error Resume Next
	
	 SystemUtil.CloseProcessByName("EXCEL.EXE") 
	 'driver lastname  sequence number 
	 gbCountValue=650
	 gbReturnValue= ""	   
	'MVR  source check
	currFlag=False
	FlagValue = TRUE
	
	'ititializes all the MVR tool vaiables
	InitializeMVRToolVariables
	
	'get the DB connection
	'rc=ConnectToDB2()
	'If rc <> micPass Then
	'	Msgbox "Unable to Get  the DataBase Connection "  & vbCrLf & Err.Description
	'    ExitAction (micFail)
	'End If
    	
	EXcelFilePath=gbServerPath & "Applications\" & gbApplicationName & "\Testware\" & "MVR tool.xls"
	EXcelSheetName="Conditions"
	
	' invoke the excel and open the sheet 
	OpenExcelSheet EXcelFilePath,EXcelSheetName

	Var = objWorksheet.UsedRange.Rows.Count
	objWorksheet.Range("A4: AK" & Var).ClearContents
	
	' To get the  TestcaseId Column name   
	TestCaseColumnName = Datatable.GetSheet("ComplexScenario").GetParameter(1).Name
	'Get test case count
	TestCaseCount  = Datatable.GetSheet("ComplexScenario").GetRowCount

	For TestCaseIteration =1 To TestCaseCount
		ErrorFlag=False
		ErrorMessage="Unable to execute test case."
		gbTestCaseStatus=micPass
		gbTEDate=""
		'Get test case details
		Datatable.GetSheet("ComplexScenario").SetCurrentRow TestCaseIteration
		gbCurrTestCaseName = Datatable.Value(TestCaseColumnName, "ComplexScenario")	
			'check the testcases
		If gbCurrTestCaseName = vbNullString Then Exit For
	
		'Condition to check which functionality sheet needs to be selected
		If InStr(1,gbCurrTestCaseName,"FG") > 0  Then
			SheetName = "Forgiveness"
		ElseIf InStr(1,gbCurrTestCaseName,"DUP") > 0  Then
			SheetName = "PLCS Dup Same Day Test Data"
		ElseIf InStr(1,gbCurrTestCaseName,"DIFF") > 0  Then
			SheetName = "PLCS Dup Diff Day Test Data"
		ElseIf InStr(1,gbCurrTestCaseName,"PLCS") > 0  Then
			SheetName = "PLCS"
		ElseIf InStr(1,gbCurrTestCaseName,"Z4AV") > 0  Then
			SheetName = "Z4AV"
		Else
			SheetName = "Rating Hierarchy"
		End If
	
		gbPolicyNumber= Datatable.Value("PolicyNo", "ComplexScenario")
		gbApplicableState= Datatable.Value("State", "ComplexScenario")
		gbLossDate= Trim(Datatable.Value("LossDate", "ComplexScenario"))
		'Error handling
		If Err.Number <> micPass  Then
			ErrorFlag = True
			ErrorMessage = ErrorMessage & ". Test case details missing in  AccidentsViolations  sheet of TestWare. " & Err.Description
			gbCurrTestCaseDesc=vbNullString
			Err.Clear
		End If
	
		'to get the all the values in adictionary
		Set  dicTestLab=createobject("Scripting.dictionary")
		ParamCount= DataTable.GetSheet("ComplexScenario").GetParameterCount
		For   IndexValue=1 to ParamCount
			ParamName=DataTable.GetSheet("ComplexScenario").GetParameter(IndexValue).name
			dicTestLab.Add  ParamName, DataTable.Value(ParamName,"ComplexScenario")

'		   If ParamName ="DriverFullName" Then
'			    msgbox ParamName&"     "&dicTestLab(ParamName)
'		   End If
			   
			
		 Next
		 
		If Trim(dicTestLab("DriverFullName")) = ""     or   gbPolicyNumber  =""  Then 
			ExitAction (micFail)  '
			conflag=true
			 'Msgbox "Mandatory Data Info is not Provided"
		End If 
	  
		Driverinfo=Split(dicTestLab("DriverFullName"),";")
'		   = arrVar(0)
		   
		dicTestLab("DriverFirstName")=Driverinfo(0)
		dicTestLab("DriverLastName")= Driverinfo(1)
		
		MVRFlag=False
		WithClaimsFlag=False
			
		'to check the MVR or Clamins flag  for the each testcase
		If  (UCase(dicTestLab("Claims")) ="YES" OR Ucase(dicTestLab("PLCS")) ="YES")     AND     UCase(dicTestLab("MVR")) ="YES"    Then
			WithClaimsFlag=True
		ElseIf   Trim(UCASE(dicTestLab("MVR")))="YES"Then 
		  MVRFlag=True
		End If
	
		'get the  data to fill the MVR TOOL 
		If  MVRFlag  OR   WithClaimsFlag Then
			gbCountValue=gbCountValue+1
			'get the testcase 
			'Datatable.GetSheet(SheetName).SetCurrentRow AV_GetTestScriptRow(SheetName)

			rc= AV_GetTestScriptRow(SheetName)
			If rc <> -1  Then
				Datatable.GetSheet(SheetName).SetCurrentRow rc
				rc=micPass
			Else
				'Handlerc micFail
				'ReportMessage 2, "Test case search", "Test case " & gbCurrTestCaseName & " not found in sheet 'TestScript'"
				'PrepareMVRData = micFail
				'Exit Function
				rc= micFail
			End If
			
			'get the total source count
			SourceCount =Datatable.GetSheet(SheetName).GetParameter("Counter")
			'call the function to filll the  MVR data from SQL 
		    If rc=micPass Then rc=AV_FetchDriverDetailsFromDB2(gbPolicyNumber,dicTestLab("DriverFirstName"),dicTestLab("DriverLastName"))
		
			'handle the error 
			If rc=micFail  Then
					ExitAction (micFail)
			End If

			'common  fields for all the  sources 
			dicValuesMVR("TC ID") = gbCurrTestCaseName
			dicValuesMVR("RateState")=gbApplicableState
			dicValuesMVR("First Name")=dicTestLab("DriverFirstName")
			dicValuesMVR("Last Name")= "TSTNBR"&gbCountValue
			'dicValuesMVR("LicenseStateIssuedNumber")
			dicValuesMVR("MVR Status")="H"
			dicValuesMVR("License Class")="A-COM, ANY COMB VEH"
			dicValuesMVR("LicenseExpiryDate_Year")= 2010
			dicValuesMVR("LicenseExpiryDate_Month")= 11
			dicValuesMVR("LicenseExpiryDate_Day")=07
			 'dicValuesMVR("StatusCode")=dicValuesMVR("License Status")
			dicValuesMVR("License Status") = GetLicenceStatus(dicValuesMVR("License Status"))
			dicValuesMVR("StatusCode")=GetLicenceStatusCode(dicValuesMVR("License Status"))
			'count the no. of sources 
			For  iteration=1 to  SourceCount
				If   DataTable.Value("InformationSource",SheetName)="MVR"     Then 
					gbTEDate=gbLossDate
					AVDesc=  DataTable.Value("AcciViolDesc",SheetName)
					AVPoints=  DataTable.Value("Points",SheetName)
					currFlag=True
				End If 
				
				If currFlag Then
					'check for the    ' ACCI '
					If DataTable.Value("IncidentType",SheetName)="ACCI" Then 
						' if    the   Source  is MVR without Claims get the occurance date from Test ware
						If gbTEDate="" Then
							If  DataTable.Value("OccuranceDate",SheetName) <>"" Then
								occurDate = DataTable.Value("OccuranceDate",SheetName)
								If  AVPoints<> "0" OR Trim(AVPoints)<> "" Then rc= AV_AddOrSubtractTED(occurDate,gbTemp)
								gbTEDate= gbReturnValue
							End If
						End If
					Elseif DataTable.Value("IncidentType",SheetName)="VIOL" or DataTable.Value("IncidentType",SheetName)="DISM" or DataTable.Value("IncidentType",SheetName)="SUSP" or DataTable.Value("IncidentType",SheetName)="F/R" Then
						If gbTEDate=""  Then
							If  DataTable.Value("ConvictionDate",SheetName) <>"" Then
								convcDate = DataTable.Value("ConvictionDate",SheetName)
								  'To handle conviction date for Aging conditions for NY state
								If UCase(gbApplicableState)="NY" and InStr(1,gbCurrTestCaseName,"AG") > 0 Then
									gbTermDate = gbTemp
									'Gets the new term date
									If Instr(1,convcDate,"ESD")>0 Then
										gbNewTermDate = DateAdd("m",6,gbTermDate)
									Elseif Instr(1,convcDate,"EED")>0 Then
										gbNewTermDate = gbTermDate
									End If
									'To handle Expiry End and Start dates 
									If IsDate(gbNewTermDate) Then 
										tempDate = DateAdd("m",-4,gbNewTermDate)
										transEndDate =DateAdd("d",-1,DateSerial(CInt(DatePart( "yyyy",tempDate)), CInt(DatePart( "m",tempDate)) + 1, 1))
										transStartDate = DateAdd("yyyy",-3,transEndDate)
										If Instr(1,convcDate,"EED")>0 Then
											tempDate =transEndDate
										Elseif Instr(1,convcDate,"ESD")>0 Then
											tempDate =transStartDate
										End If
										gbTemp=tempDate
									End if
								End if
								If  AVPoints<> "0" OR Trim(AVPoints)<> "" Then rc= AV_AddOrSubtractTED(convcDate,gbTemp)
								gbTEDate= gbReturnValue
							End If
						End If
				End if
  	  
		   If  (AVPoints <> ""   OR    AVPoints <> "0")  And (DataTable.Value("IncidentType",SheetName)="VIOL" ) Then
					rc = GetStandardViolationCode(AVPoints, AVDesc)
					dicValuesMVR("Standard Violation Code")= gbReturnValue
					If (Instr(1,gbApplicableState,"CA") > 0 OR Instr(1,gbApplicableState,"AZ") > 0)  and AVPoints > 0 Then
						dicValuesMVR("State Violation Code") = "1"
					End If
				End If	
				
				'check the flag for MVR 
				If currFlag  Then
					dicValuesMVR("Incident Type")=  DataTable.Value("IncidentType",SheetName)
					dicValuesMVR("J Record Type") = dicValuesMVR("Incident Type")
					OccuranceDate=Split(gbTEDate,"-")
					If   Ubound(OccuranceDate)=2 Then
						dicValuesMVR("OccuranceDate_Year")= OccuranceDate(2)
						dicValuesMVR("OccuranceDate_Month")= OccuranceDate(0)
						dicValuesMVR("OccuranceDate_Day")= OccuranceDate(1)
						
						dicValuesMVR("RCDate_Year")= OccuranceDate(2)
						dicValuesMVR("RCDate_Month")= OccuranceDate(0)
						dicValuesMVR("RCDate_Day")= OccuranceDate(1)
					End If
					'fill the MVR   
					rc=UpdateMVRData(dicColMVR,dicValuesMVR)
					'handle the error 
					If rc=micFail  Then
							ExitAction (micFail)
					End If

					If Datatable.GetSheet(gbTestLabName).GetParameter("MVRDriverLastName").Value=  ""  Then
                        Datatable.GetSheet(gbTestLabName).GetParameter("MVRDriverLastName").Value= dicValuesMVR("Last Name")
						Datatable.GetSheet(gbTestLabName).GetParameter("LicenseNumber").Value =dicValuesMVR("LicenseStateIssuedNumber")
					End If

					dicValuesMVR.RemoveAll
					Erase   OccuranceDate
					currFlag=False
				End If
				 
			End if
			
			
			Datatable.GetSheet(SheetName).SetNextRow
			Next ' inner for loop end
		End if 
     
	Next 'Main For loog end
	 
	' to open the woork book 
	EXcelFilePath=gbServerPath & "Applications\" & gbApplicationName & "\Testware\" & "MVR tool.xls"
	EXcelSheetName="Macro - MVR Data"
	OpenExcelSheet EXcelFilePath,EXcelSheetName
	
	If gbCountValue > 100 Then
	
				ResultPath=  gbServerPath & "Applications\" & gbApplicationName & "\Testware"
				' to run the macro function 
				RunMacroMVRData  ResultPath
	Else
				Msgbox "MVR conditions doesn't exists for preparing data"
	End If
	
	' to clear the  old  mvr data 
	' TBD
	
	'save and  close   the Excel files
	CloseExcel(objWorkbook)
	SystemUtil.CloseProcessByName("EXCEL.exe") 
End Function
'################################################################################################################################
'################################################################################################################################
'	FUNCTION NAME		: RunMacroMVRData(ByVal ResultPath)
'	DESCRIPTION			: 
'	PARAMETERS			: (None)'			
'	DEPENDENCIES		: (None)'    
' 	RETURN VALUE(S)		: (None)'
'	ERRORS				: (None)'
'	AUTHOR				: Kiran Batchu
'	ORIGINAL DATE		:  
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
Public Function RunMacroMVRData(ByVal ResultPath)
   On Error Resume next 
   
	'Enters the  MVR Data Notepad file path
	objWorksheet.Cells(31,"B").Value =ResultPath 
	
	'Click on the  generate MVR data  button in MVR macro tool
    objExcel.run("Sheet2.cmdGenerateXML_Click")
End Function 
'################################################################################################################################
'	FUNCTION NAME		: OpenExcelSheet(ByVal EXcelFilePath,Byval EXcelSheetName)
'	DESCRIPTION			: 
'	PARAMETERS			: (None)'			
'	DEPENDENCIES		: (None)'    
' 	RETURN VALUE(S)		: (None)'
'	ERRORS				: (None)'
'	AUTHOR				: 
'	ORIGINAL DATE		:  Kiran Batchu
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------

Public  Function  OpenExcelSheet(ByVal EXcelFilePath,Byval EXcelSheetName)
	on Error Resume Next 
	'to check  t work book is already opened or not 
	If EXcelFilePath <>  objWorkbook.Path&"\"& objWorkbook.Name Then 
		Set objWorkbook = objExcel.Workbooks.Open(EXcelFilePath)
	End If 
	'to  check the worksheet is active or not 
	If objWorksheet.name <>  EXcelSheetName  Then
		Set objWorksheet = objWorkbook.Worksheets(EXcelSheetName)
	End if 
	Err.clear
    
End Function

'################################################################################################################################
'	FUNCTION NAME		: CloseExcel(ByVal FileName)
'	DESCRIPTION			: 
'	PARAMETERS			: (None)'			
'	DEPENDENCIES		: (None)'    
' 	RETURN VALUE(S)		: (None)'
'	ERRORS				: (None)'
'	AUTHOR				: Kiran Batchu
'	ORIGINAL DATE		: 
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
Public Function CloseExcel(ByVal FileName)
	'save the  excel file and close   the file 
	objWorkbook.Save
	objWorkbook.close
			'check the error  
	If Err.Number <> 0 Then
		'Msgbox "Save And  Close the  Excel File" & Err.Description & vbCrLf
		CloseExcel=micfail
	Else
		  CloseExcel=micPass
	End If
End Function

'################################################################################################################################
'	FUNCTION NAME		: UpdateMVRData(ByVal dicColMVR,ByVal dicValuesMVR)
'	DESCRIPTION			:  fills all the data in the MVR MacroTool excel sheet 
'	PARAMETERS			: (None)'			
'	DEPENDENCIES		: (None)'    
' 	RETURN VALUE(S)		: (None)'
'	ERRORS				: (None)'
'	AUTHOR				: Kiran Batchu
'	ORIGINAL DATE		: 
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'24 June 2009   			Prashanthi Nandagiri	Added  code to clear any existing contents in MVR tool  before preparing MVR Data
'24 June 2009   			Prashanthi Nandagiri	Removed code to clear any existing contents in MVR tool  before preparing MVR Data
'-----------------------------------------------------------------------------------------------------------------------

Public Function UpdateMVRData(ByVal dicColMVR,ByVal dicValuesMVR)

	Dim  Startrow,ValueKeysName,ColKeysName,CurrentEmptyRow,CurrentColumnNum, Var
	On Error Resume Next
' initialize the row value
	CurrentEmptyRow=4
	Err.Clear

     'to get the empty row in the Conditions sheet 
	Do until    IsEmpty(objWorksheet.Cells(CurrentEmptyRow, 20))
		CurrentEmptyRow=CurrentEmptyRow+1
	Loop
		
	'to fill the  each columns in the MVR TOOL , Conditions   sheet
	For Each  ValueKeysName    In dicValuesMVR
		 For Each   ColKeysName in  dicColMVR
				  If Trim(UCase(ValueKeysName)) = Trim(UCase(ColKeysName)) Then  
					   CurrentColumnNum= dicColMVR(ColKeysName)
					   objWorksheet.Cells(CurrentEmptyRow,CurrentColumnNum).Value = dicValuesMVR(ValueKeysName)
					   Exit For
					End If
		 Next
	Next
	'handle the Error 
	If Err.Number <> 0 Then
		'Msgbox "Import hte Data to MVR TOOL " & Err.Description & vbCrLf
		UpdateMVRData=micfail
	Else
		  UpdateMVRData=micPass
	End If
End Function 

'################################################################################################################################

'dicValuesMVR.Add   "State Violation Code",24
'dicValuesMVR.Add    "Standard Violation Code",25
'dicValuesMVR.Add  "case number",26
'dicValuesMVR.Add  "Violation Description",27

'################################################################################################################################
'	FUNCTION NAME		: InitializeMVRToolVariables()'
'	DESCRIPTION			: Imports the Testware sheet for the current state'
'	PARAMETERS			: (None)'			
'	DEPENDENCIES		: (None)'    
' 	RETURN VALUE(S)		: (None)'
'	ERRORS				: (None)'
'	AUTHOR				: Kiran Batchu
'	ORIGINAL DATE		: 
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------

Public Function InitializeMVRToolVariables()

	On Error Resume Next
	'Closes already opened Excel sheets
	SystemUtil.CloseProcessByName("EXCEL.EXE") 

	'Create Connections to the excel
	Set objExcel = CreateObject("Excel.Application")
	objExcel.Visible=True  'false
	Set dicValuesMVR= CreateObject("Scripting.Dictionary")
	Set dicColMVR= CreateObject("Scripting.Dictionary")


	Set  objWorkbook=Nothing
	Set  objWorksheet=NOthing
	
	' initialize the   dicColMVR   dictionary with MVR Tool  columns as key and  column number as its value .
	dicColMVR.Add "Req ID",1
	dicColMVR.Add   " TC ID",2
	dicColMVR.Add  "Scenario",3
	dicColMVR.Add  "RateState",4
	dicColMVR.Add   "First Name",5
	dicColMVR.Add   "Last Name",6
	dicColMVR.Add  "DOB",7
	dicColMVR.Add  "LicenseStateIssuedNumber",8
	dicColMVR.Add  "LicenseState",9
	dicColMVR.Add  "MVR Status",10
	dicColMVR.Add  "License Class",11
	dicColMVR.Add  "LicenseExpiryDate_Year",15
	dicColMVR.Add  "LicenseExpiryDate_Month",16
	dicColMVR.Add  "LicenseExpiryDate_Day",17
	dicColMVR.Add  "License Status",18
	dicColMVR.Add  "StatusCode",19
	dicColMVR.Add  "Incident Type",20
	dicColMVR.Add   "OccuranceDate_Year ",24
	dicColMVR.Add  "OccuranceDate_Month",25
	dicColMVR.Add   "OccuranceDate_Day",26
	dicColMVR.Add   "RCDate_Year",30
	dicColMVR.Add  "RCDate_Month",31
	dicColMVR.Add   "RCDate_Day",32
	dicColMVR.Add   "State Violation Code",33
	dicColMVR.Add "Standard Violation Code",34
	dicColMVR.Add  "case number",35
	dicColMVR.Add  "Violation Description",36
	'added for new MVR tool
	dicColMVR.Add  "J Record Type",37

End Function 

'################################################################################################################################
'	TEST SCRIPT NAME			 	:  GetLicenceStatusCode(ByVal LicenseStatus)
' 	TEST SCRIPT DESCRIPTION		:  This Function returns the State Code for the given License Status'
' 	PARAMETERS					   :  (None)'       
' 	RETURNS						 :    State Code'
' 	ERRORS						  :  (None)'
'	AUTHOR						  :   'Kiran Batchu
'	ORIGINAL DATE				   : 
'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'		     											 R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	     REVISED BY		 :										CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Public Function GetLicenceStatusCode(ByVal LicenseStatus)
	Dim  StatusCode
	On Error Resume Next
	Select Case  Trim(Ucase(LicenseStatus))
		Case "VALID"
			StatusCode=1
		Case  "CANCELLED"
			   StatusCode="X"
		Case "SUSPENDED"
			StatusCode=2
		Case "NO VALID LIC"
			  StatusCode="X"
		Case  "DECEASED"
			 StatusCode="D"
		Case  "DENIED"
			StatusCode=6
		Case "DISQUALIFIED"
			StatusCode="A"
		Case "ELIGIBLE"
			 StatusCode="B"
		Case "EXPIRED"
			StatusCode=4
		Case "ID ONLY"
			 StatusCode=9
		Case "LIMITED"
			  StatusCode=7
		Case "NO NARRATIVE"
			 StatusCode="N"
		Case "MILITARY"
			 StatusCode=8
		Case "REVOKED"
			 StatusCode=3
		Case "UNAVAILABLE"
			StatusCode="U"
		Case Else
			StatusCode=""
	End Select
	GetLicenceStatusCode=StatusCode
 
End Function


'################################################################################################################################
'	TEST SCRIPT NAME			 	:  GetLicenceStatusCode(ByVal LicenseStatus)
' 	TEST SCRIPT DESCRIPTION		:  This Function returns the State Code for the given License Status'
' 	PARAMETERS					   :  (None)'       
' 	RETURNS						 :    State Code'
' 	ERRORS						  :  (None)'
'	AUTHOR						  :   'Kiran Batchu
'	ORIGINAL DATE				   : 
'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'		     											 R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	     REVISED BY		 :										CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Public Function GetLicenceStatus(ByVal LicenseStatus)
	Dim  Status
	On Error Resume Next
	Select Case  Trim(Ucase(LicenseStatus))
		Case "K"
			Status="VALID"
		Case  "C"
			   Status="CANCELLED"
		Case "S"
			Status="SUSPENDED"
		Case "7"
			  Status="NO VALID LIC"
		Case  "D"
			 Status="DECEASED"
		Case  "J"
			Status="DENIED"
		Case "B"
			Status="DISQUALIFIED"
		Case "3"
			 Status="ELIGIBLE"
		Case "E"
			Status="EXPIRED"
		Case "2"
			 Status="ID ONLY"
		Case "6"
			  Status="LIMITED"
		Case "4"
			 Status="NO NARRATIVE"
		Case "1"
			 Status="MILITARY"
		Case "R"
			 Status="REVOKED"
		Case "5"
			Status="UNAVAILABLE"
		Case Else
			Status=""
	End Select
	GetLicenceStatus=Status
 
End Function

'################################################################################################################################
'	TEST SCRIPT NAME			 	:  AV_FetchDriverDetailsFromDB2(ByVal PolicyNumber, ByVal  DFirstName,ByVal DLastName)
' 	TEST SCRIPT DESCRIPTION		:  
' 	PARAMETERS					   :  (None)'       
' 	RETURNS						 :    State Code'
' 	ERRORS						  :  (None)'
'	AUTHOR						  :   Kiran Kumrar Batchu
'	ORIGINAL DATE				   : 
'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'		     											 R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	     REVISED BY		 :										CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Function AV_FetchDriverDetailsFromDB2(ByVal PolicyNumber, ByVal  DFirstName,ByVal DLastName)

	Dim   MVRRecordSet, intCountType, StrSql, RecordsCount, MVRColumns, keyNames,strSql1,strSql2,strSql3,region, EffectiveDateOption, frDriverPage, RunTimeObject, WeObj
	
	MVRColumns = Array("DOB", "LicenseStateIssuedNumber", "LicenseState", "License Status", "TermEffectiveDate")
	 If gbAppRegion = "QA" Then 
		region="CGQA"
	Elseif gbAppRegion = "IST2" Then 
		region="CGIST"
	Elseif gbAppRegion = "IST1" Then
		region="CGT01"
	Elseif gbAppRegion = "RETRO2" Then
		region="CGAM"
	Elseif gbAppRegion = "FAST" Then
		region="CGFAST"
	End If

 If gbAppRegion <> "QA" Then 
	'Sql Query 
	StrSql1= "Select  b.birth_date,t.license_number,t.LICENSE_STATE,t.LICENSE_STATUS,h.term_effect_date from "&region&".tw1a0 w, "&region&".tu4ml t,"&region&".tw4h0 h,"&region&".tu4m2 b Where w.LAST_NAME_COY_NAME = '"&DLastName&"' and w.FIRST_NAME='"&DFirstName &"' and w.Client_REFERENCE=t.Driver_reference AND t.LICENSE_STATUS in ('  ','K') "
	strSql2 = "and h.term_effect_date = (Select max(Distinct h1.term_effect_date) from "&region&".tw4h0 h1 where h1.Policy_number='"&PolicyNumber&"')"
	strSql3 = " and h.policy_number=b.policy_number and w.Client_REFERENCE=b.Driver_reference  FETCH FIRST 1 ROWS ONLY WITH UR;" 
	StrSql=StrSql1&StrSql2&strSql3
	'msgbox strsql
	AV_Connection.CommandTimeout = 900
	Set  MVRRecordSet = AV_Connection.Execute(StrSql)
    
    MVRRecordSet.MoveFirst
	While  NOT  MVRRecordSet.EOF
		For intCountType = 0 To MVRRecordSet.Fields.Count - 1
			keyNames= MVRColumns(intCountType) 
			dicValuesMVR(keyNames) = MVRRecordSet.Fields(intCountType)
		Next
		MVRRecordSet.Movenext
	Wend
Elseif gbAppRegion = "QA" Then 
	gbPolicyNum = PolicyNumber
	'Start Test case report
		StartTestCaseReport

	'Get details from the application
	rc = AV_SetupRepView()
	'EffectiveDateOption=""
	EffectiveDateOption = "Any Date"
	If rc = micPass Then rc = AV_NavigateToAmendments((EffectiveDateOption))
		Set frDriverPage = Browser(gbBrowserName).Page(gbApplicationHomePage).Frame("DriverPage")

	gbDriverName = DFirstName & " " & DLastName
	
	'Selects the specified driver from the Driver table
	If rc= micPass Then rc= SearchWebTableRow(frDriverPage.WebTable("Driver Number"), "2" , gbDriverName, "No",True)
    If rc=micPass Then rc= SelectRow(frDriverPage,"Driver Number","","","",gbReturnValue-1)
	Wait 1
	'Gets Driver first Name and Last Name from driver Page
	GetFrameData frDriverPage,"DOB","Age"
	dicValuesMVR("DOB") = gbReturnValue
	
		
	'MVRColumns = Array("DOB", "LicenseStateIssuedNumber", "LicenseState", "License Status", "TermEffectiveDate")

	If rc=micPass Then rc= SelectRow(frDriverPage,"License","","","",2)

'			'Select License number form table
'		   Set RunTimeObject = Description.Create
'			RunTimeObject("html tag").Value = "TD"
'			RunTimeObject("innertext").Value = gbLicenseNumber
'			
'			Set WeObj=frDriverPage.WebTable("License").ChildObjects(RunTimeObject)
'			'WeObj(0).Click
'		   WeObj(0).FireEvent "onclick" 
'			WeObj(0).FireEvent "onmouseover"

	   dicValuesMVR("LicenseStateIssuedNumber") = frDriverPage.WebTable("License").GetCellData(3,3)
	   dicValuesMVR("LicenseState") = frDriverPage.WebTable("License").GetCellData(3,2)
		dicValuesMVR("License Status") = frDriverPage.WebTable("License").GetCellData(3,4)
		dicValuesMVR("TermEffectiveDate") = gbTED

	EndTestCaseReport
	'EndtTestCaseReport
	CloseBrowsers		
End If
	'handle the Error 
	If Err.Number <> 0 Then
		 AV_FetchDriverDetailsFromDB2=micfail
	Else
		  AV_FetchDriverDetailsFromDB2=micPass
	End If

gbTemp=dicValuesMVR("TermEffectiveDate")

End Function

''################################################################################################################################
'	TEST SCRIPT NAME			 	: GetStandardViolationCode( ByVal AVSPoints,ByVal AVSDesc)
' 	TEST SCRIPT DESCRIPTION		:  Retrieves the Violation code from the matrix
' 	PARAMETERS					   :       
'								AVSPoints 
'								AVSDesc
' 	RETURNS						 :    None
' 	ERRORS						  :  (None)'
'	AUTHOR						  :   	Gopi chand T
'	ORIGINAL DATE		   : 
'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'		     											 R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	     REVISED BY		 :										CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'05 May 2009						Prashanthi Nandagiri							Add code to handle violaiton code for 10 year major violation				
'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Function GetStandardViolationCode(ByVal AVSPoints, ByVal AVSDesc)

   Dim RowNum,rCount,flag
   On Error Resume Next
   flag = False
   rCount = DataTable.GetSheet("ViolationCodes").GetRowCount
	'check for the values
	For RowNum = 1 to rCount

		DataTable.GetSheet("ViolationCodes").SetCurrentRow(RowNum)
	 
		If Instr(1,gbApplicableState,Trim(DataTable.Value("State","ViolationCodes"))) > 0  Then
			If Trim(DataTable.Value("PointsAssigned","ViolationCodes")) = Trim(AVSPoints) Then 
				If  Instr(1,gbApplicableState,"CA")>0 and Instr(1,AVSDesc,"Ten-year Major Violation")>0 and (Trim(DataTable.Value("Aging","ViolationCodes")) = "10"  OR Trim(DataTable.Value("Aging","ViolationCodes")) = 10) Then
					gbReturnValue =Trim(DataTable.Value("ViolationCode","ViolationCodes"))
					flag = True
					Exit  For
				End If

				If  AVSDesc <> "Ten-year Major Violation" Then
				
				 gbReturnValue =Trim(DataTable.Value("ViolationCode","ViolationCodes"))
				 flag = True
				 Exit  For
				End If
			End If 
		End If
	Next
	If Not flag Then
		GetStandardViolationCode = micFail
	Else
		GetStandardViolationCode = micPass
	End If
	
End Function 
'################################################################################################################################
'	FUNCTION NAME			: AV_ReservePolicies()
'
'	DESCRIPTION				: Reserve polices based on the test cases given in TestLab sheet of testware
'
'   PARAMETERS				: 

'	DEPENDENCIES			: (None)
'   
' 	RETURN VALUE(S): 
'		micPass	 			: On successful execution of the function
'		micFail	 			: On unsuccessful execution of the function
'
'	ERRORS					: (None)
'
'	AUTHOR					: Sudheer Gupta. A
'
'	ORIGINAL DATE			: November 02 2006
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'24 June 2009	Prashanthi Nandagiri   Updated the system message as per TDM Changes
'################################################################################################################################
Public Function AV_ReservePolicies()
	Dim rc, TestCaseNumber, TestCaseName, TestCaseColumnName, TestCaseCount, TestCaseIteration, PoliciesReserved, ArrParsedTestCase, PolicyNumber, RowCnt, Cnt, AppendPolicies, Counter
	Dim ArrPolicies,Col, Excel_RowCnt, TestCaseID
	Dim objExcell, objWorkbookk, EXcelFilePath,objWbBook, objWksheet
	'Dim dicRecordSet

	On Error Resume Next

	'Import the master testware from server
 '   rc = ImportDataRequestSheet

	'Intialize TDM related variables
	InitializeTDMVariables
	gbCurrTestCaseName = "Reserve Policies"
	gbCurrTestCaseDesc = vbNullString
	
	'Create HTML report for TDM
	StartTDMReport "Reserve Policy"
	
	PoliciesReserved = 0

	  'Close open browsers
		CloseBrowsers

	AppendPolicies = VbNullString
	RowCnt = DataTable.GetSheet(gbTestLabName).GetRowCount

	Counter =0 
	For Cnt =1 to RowCnt
		DataTable.GetSheet(gbTestLabName).SetCurrentRow(Cnt)
		PolicyNumber = DataTable.GetSheet(gbTestLabName).GetParameter("PolicyNo").Value
		If  PolicyNumber  <> VbNullString Then
			Counter = Counter +1 
			Exit For
		End If
	Next

If Counter > 0  Then

	'Open TDM application
	rc = OpenWebURL(TDMURL)

	'Login to TDM
	If rc = micPass Then rc = TDMLogin()

	'Wait for client menu to load
	If rc = micPass Then rc = WaitForObject(pgTestDataManagement.Link("Retrieve Policy By Policy No"))
	If Err.Number <> 0 Then Err.Clear

	For Cnt =1 to RowCnt
		DataTable.GetSheet(gbTestLabName).SetCurrentRow(Cnt)
		TestCaseID = DataTable.GetSheet(gbTestLabName).GetParameter("TestCaseID").Value
		PolicyNumber = DataTable.GetSheet(gbTestLabName).GetParameter("PolicyNo").Value
		If  PolicyNumber  <> VbNullString AND TestCaseID <> VbNullString Then
			If rc = micPass Then rc = ObjectButton(pgTestDataManagement, "Clear", "Click")
			'Select Region
			If rc = micPass Then rc = ObjectList(pgTestDataManagement, "Region", "SelectValue", "", "", "", gbAppRegion)
			'Enter list of policies that are to be reserved		
			If rc = micPass Then rc = ObjectEdit(pgTestDataManagement, "Policy Number", "EnterValue", "", "", "", PolicyNumber)
			'Click on retrieve policy link
			If rc = micPass Then rc = ObjectButton(pgTestDataManagement, "Retrieve", "Click")
			SystemMessage = vbNullString
			If pgTestDataManagement.WebTable("System Message").Exist Then
				SystemMessage = pgTestDataManagement.WebTable("System Message").GetCellData(1,2)
				If Instr(1,SystemMessage,"Please enter project to reserve policy") =  0  Then
					 HandleRc micFail
					 ReportStep 1, TestCaseID,"Policies Should reserve Successfully", "Policies is not reserved by user due to: " & SystemMessage
					 If rc = micPass Then rc = ObjectButton(pgTestDataManagement, "Clear", "Click")
						DataTable.Value("PolicyNo",gbTestLabName)= ""
						DataTable.Value("DriverFullName",gbTestLabName)= ""
						 AV_ReservePolicies = micFail
				Else
					'Select project Name
					If rc = micPass  Then rc = 	ObjectList(pgTestDataManagement, "Project Name", "SelectValue", "", "", "", gbTDMProjectName)
					'Click on Reserve
					If rc = micPass  Then rc = ObjectButton(pgTestDataManagement, "Reserve", "Click")
					'Static wait required for TDM to refresh the current page
					Wait gbObjectSyncTime
					'Wait for the page to load again
					If rc = micPass  Then rc = WaitforObject(pgTestDataManagement.WebButton("Retrieve"))
				   'Read the system message
					SystemMessage = Trim(pgTestDataManagement.WebTable("System Message").GetCellData(1,2))
					'Handle System message
					If InStr(1, Trim(SystemMessage), "policie(s) Reserved") = 0 Then
						HandleRC micFail
						AV_ReservePolicies = micFail
						ReportStep 1, TestCaseID, "Reserve the policy given by TDM", "Reservation Failed. " & SystemMessage
							'Exit Function
					Else
						SystemMessage = vbNullString
						AV_ReservePolicies = micPass
					End If
				End If
			End If
		Else
			 ReportStep 1, "Reserve Policy", "Policies should fetch from DB2 ", " No Policies are fetched  from DB2 for any testcase ID"
			EndTDMReport
		End if
	Next 

		 'Close HTML Report for TDM
			EndTDMReport
			
		'Log out from TDM
		If rc = micPass Or rc = ErrNoPolicyFetched Then rc = TDMLogout()

End If

	CloseBrowsers
	gbBrowserName = OriginalBrowserName
	gbApplicationName = OriginalApplicationName

	'TestDataCreation
	'If rc = micPass Then rc = AV_TestDataCreation()
	If rc <> micPass Then
		HandleRC micFail
		AV_ReservePolicies = micFail
		ReportStep 1, "TestDataPreparation", "TestData Should be created successfully", "Problem in creating Testdata"
	End If
	
End Function
'################################################################################################################################
'	FUNCTION NAME		: AV_FGPreReqDatesVerification( )
'
'	DESCRIPTION			:  This function sets the pre-requisite conditions for forgiveness conditions
'
'	PARAMETERS			:   (None)
''	DEPENDENCIES		: (None)
'
' 	RETURN VALUE(S): 
'		micPass	 		: On successful execution of the function
'		micFail	 		: On unsuccessful execution of the function
'
'	ERRORS				: (None)
'
'	AUTHOR				:  Venkatarami Reddy.G
'
'	ORIGINAL DATE		: 8th October  2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY			:	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'04-Apr-2009					Prashanthi Nandagiri	Handled the code if difference between DOB and DatefirstLicensed is < 15 
'05-May-2009				Prashanthi Nandagiri	Included code for verification of DateLicensedinUS/Canada existense
'-----------------------------------------------------------------------------------------------------------------------
Public Function AV_FGPreReqDatesVerification( )
	Dim firstLicenseDate,originDate,rc,acceptFlag,forgivenessFlag, DOB
	acceptFlag=False
	forgivenessFlag = False
	rc = ReportStep(1," Origin and Driver First License Dates Verification for Forgiveness Conditions","","")
	
	Set frDriverPage = Browser(gbBrowserName).Page(gbApplicationHomePage).Frame("DriverPage")
	
	'Selects the specified driver from the Driver table
	If rc= micPass Then rc= SearchWebTableRow(frDriverPage.WebTable("Driver Number"), "2" , gbDriverName, "No",True)
    If rc=micPass Then rc= SelectRow(frDriverPage,"Driver Number","","","",gbReturnValue-1)

	If rc=micPass Then rc = GetFrameData(frDriverPage,"DOB","Age")
	DOB = gbReturnValue

	If rc= micPass Then rc = GetFrameData(frDriverPage,"Date First Licensed","City")

	If rc=micPass Then
	    firstLicenseDate=gbReturnValue
		If Instr(1,gbCurrTestCaseName,"NFG") > 0 Then
			If (DateDiff("yyyy",firstLicenseDate,gbTermDate)> 5) Then
				' get Driver First License date to update
				firstLicenseDate= DateAdd("m",2,DateAdd("yyyy",-5,gbTermDate))
				forgivenessFlag = True
			End If  
		Else
			If (DateDiff("yyyy",firstLicenseDate,gbTermDate)< 5) Then
			
				' get Driver First License date to update
				firstLicenseDate= DateAdd("m",-1,DateAdd("yyyy",-5,gbTermDate))
				forgivenessFlag = True
			End If  
		End if  
		If forgivenessFlag = True Then
			' Convert the Driver First License format into mm-dd-yyyy format
			If rc= micPass Then rc = FormatDateString(firstLicenseDate,"MM/DD/YYYY" ,"MM-DD-YYYY")
			firstLicenseDate = gbReturnValue		
			
			rc = SelectTask("DriverPage","Update Driver")
			If rc= micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"DriverPage","")
			If rc= micPass Then rc = WaitForObject(frAddUpdateDriver.WebElement("School Information"))

			'	Enter  updated Driver  First License Date
			If rc=micPass Then rc=ObjectEdit(frAddUpdateDriver, "Date First Licensed", "EnterDate", "", "", "", firstLicenseDate)

			  'Enter Date Licensed in US/Canada 
			If  frAddUpdateDriver.WebEdit("Date Licensed in US/Canada").Exist (3) And rc = micPass  Then
				If CStr(frAddUpdateDriver.WebEdit("Date Licensed in US/Canada").GetROProperty("disabled"))  = "0" Then
				 rc  = ObjectEdit (frAddUpdateDriver, "Date Licensed in US/Canada", "EnterDate", "", "", "", firstLicenseDate)
				End If	
			End If
			
				'code to handle if difference between DOB and DatefirstLicensed is < 15 
			If (DateDiff("yyyy",DOB,firstLicenseDate)< 16) Then
			  DOB = DateAdd("m",-1,DateAdd("yyyy",-16,firstLicenseDate))
			  If rc= micPass Then rc = FormatDateString(DOB,"MM/DD/YYYY" ,"MM-DD-YYYY")
				DOB = gbReturnValue
				If rc=micPass Then rc=ObjectEdit(frAddUpdateDriver, "DOB", "EnterDate", "", "", "", DOB)
			End If
			' Click the OK button in Update Driver Screen
			If rc=micPass Then rc=ObjectButton(frAddUpdateDriver, "OK", "Click")

			If rc=micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"DriverPage","")
			If rc=micPass Then rc = WaitForObject(frDriverPage.WebElement("Add New Driver"))

			acceptFlag= True
		End If
		
	Else
		HandleRC rc
		ReportStep 2,"Date First Licensed Verification","First License date Should be as per prerequisites"," First License date could not be fetched"
		AV_FGPreReqDatesVerification =rc
		Exit Function
	End If	

		' Navigate to Policy Tab		
	If rc=micPass Then rc = SelectRepviewTab("PolicyQuoteSummary Tabs",  "Policy")
	If rc=micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"PolicyAmendment","")
	If rc=micPass Then rc = WaitForObject(frPolicyAmendment.WebElement("Complete"))
	
	' get Origin Date
	  If rc= micPass Then rc = GetFrameData(frPolicyAmendment,"Origin Date","Last User")
	
	If rc=micPass Then
		originDate=gbReturnValue
		forgivenessFlag = False

		If Instr(1,gbCurrTestCaseName,"NFG") > 0 Then
			If (DateDiff("yyyy",originDate,gbTermDate)> 5) Then
				' get Driver First License date to update
				originDate= DateAdd("m",2,DateAdd("yyyy",-5,gbTermDate))
				forgivenessFlag = True
			End If  
		Else
			 If (DateDiff("yyyy",originDate,gbTermDate)< 5) Then
			
				' get Driver First License date to update
				originDate= DateAdd("m",-1,DateAdd("yyyy",-5,gbTermDate))
				forgivenessFlag = True
			End If  
		End if 
		
	   If forgivenessFlag = True Then
			' Convert the Origin date format into mm-dd-yyyy format
			If rc= micPass Then rc = FormatDateString(originDate,"MM/DD/YYYY" ,"MM-DD-YYYY")
			originDate = gbReturnValue		

			 If rc= micPass Then rc = SelectTask("PolicyAmendment","Update Origin Date")
			If rc= micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"Update Origin Date","")
			If rc= micPass Then rc = WaitForObject(frUpdateOriginDate.WebButton("OK"))

			'	Enter  updated Origin Date
			If rc=micPass Then rc=ObjectEdit(frUpdateOriginDate, "Effective Date", "EnterDate", "", "", "", originDate)

			' Click the OK button in Update origin date Screen
			If rc=micPass Then rc=ObjectButton(frUpdateOriginDate, "OK", "Click")
			
			If rc=micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"PolicyAmendment","")
			If rc=micPass Then rc = WaitForObject(frPolicyAmendment.WebElement("Complete"))
			acceptFlag= True	
		End If
	Else
		HandleRC rc
		ReportStep 2,"Origin Date Verification","Origin date should be as per prerequisites"," Origin date could not be fetched"
		AV_FGPreReqDatesVerification =rc
		Exit Function
	End If

	If  acceptFlag= True Then
		rc = AcceptTransaction(frPolicyAmendment, "Cancel", "")
		If rc=micPass Then rc = WaitForwindow(gbBrowserName,gbApplicationHomePage,"PolicyAmendment","")
		If rc=micPass Then rc = WaitForObject(frPolicyAmendment.WebElement("Complete"))
 
		AV_FGPreReqDatesVerification =rc   	
	Else
	     ReportStep 2,"Date Verification","Origin and First License dates Should be as per prerequisites","Origin and First License dates meeting per prerequisites"
		 AV_FGPreReqDatesVerification = rc
   End If
      	' Navigate to driver Tab		
		If rc=micPass Then rc = SelectRepviewTab("PolicyQuoteSummary Tabs",  "Driver")
		If rc=micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"DriverPage","")
		'If rc=micPass Then rc = WaitForObject(frPolicyAmendment.WebElement("Add New Driver"))

End Function

'################################################################################################################################

'            FUNCTION NAME                      :AV_FrontEndRenewalProcess()
'
'            DESCRIPTION                           :  This function will renew the policy from the repview application 
'
'            PARAMETERS                          :   (None)
''           DEPENDENCIES                       : (None)
'
'            RETURN VALUE(S): 
'                        micPass                                  : On successful execution of the function
'                        micFail                         : On unsuccessful execution of the function
'
'            ERRORS                                              : (None)
'
'            AUTHOR                                               :  Prashanthi Nandagiri
'
'            ORIGINAL DATE                        : 14th October  2008
'-----------------------------------------------------------------------------------------------------------------------
'                                    R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'            REVISED DATE            :           REVISED BY                            :           CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'################################################################################################################################
Public Function AV_FrontEndRenewalProcess()
    Dim rc
	On Error Resume Next
		rc = SelectTask("PolicyAmendment","Renew Policy")
		wait 2
		If rc=micPass Then WaitForObject(frPolicyAmendment.WebElement("Retrieve Policy"))
		If rc=micPass Then rc =AcceptTransaction(frPolicyAmendment,"Cancel","")
		If rc=micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"PolicyAmendment","")
		If rc=micPass Then rc = WaitForObject(frPolicyAmendment.WebElement("Complete"))
		If rc=micPass Then rc = SelectTask("PolicyAmendment","Complete")
		If rc=micPass Then rc = AV_SelectPolicy(gbPolicyNum,"")
		If rc=micPass Then rc = SelectTask("PolicyQuoteSummary","Amendments")
		AV_FrontEndRenewalProcess = rc
End Function

'################################################################################################################################
'	FUNCTION NAME			: AV_Ammendments()
'
'	DESCRIPTION				: This function creates the data and append it to the testware
'
'   PARAMETERS				: 

'	DEPENDENCIES			: (None)
'   
' 	RETURN VALUE(S): 
'		micPass	 			: On successful execution of the function
'		micFail	 			: On unsuccessful execution of the function
'
'	ERRORS					: (None)
'
'	AUTHOR					: Prashanthi Nandagiri
'
'	ORIGINAL DATE			: Sep 22 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'   
'
'################################################################################################################################

Public Function AV_Ammendments(ByVal SheetName)
'	Dim rc, Flag, ErrorFlag, ErrorMessage, TestCaseCount, TestCaseIteration, EffectiveDateOption, SheetName,ClaimsFlag, MVRFlag, PLCSFlag, NoOfAmmends, Cnt, InformationSource
	Dim AmendmentType, RowID, rc

	On Error Resume Next

			AmendmentType = Trim(Datatable.GetSheet(SheetName).GetParameter("AmendmentType").Value)
			'RowID = Trim(Datatable.GetSheet(SheetName).GetParameter("RowID").Value)
			If  AmendmentType  = "Add Driver" Then
				rc = AV_AddDriver("AVS_PersonalInfo", gbCurrTestCaseName)
				If rc = micPass Then rc = AV_DriVehAssignment()
			Elseif AmendmentType  = "Update Driver" Then
				gbDriverName = Trim(Datatable.GetSheet(gbTestLabName).GetParameter("DiverFullName").Value)
				rc = AV_UpdateDriver("AVS_PersonalInfo", gbCurrTestCaseName)
			End If

'						If rc <> micPass Then 
'							DataTable.Value("PolicyNo",gbTestLabName)= ""
'							DataTable.Value("DriverFullName",gbTestLabName)= ""
'						End If


AV_Ammendments = rc
End Function


''################################################################################################################
'	FUNCTION NAME		: AV_FetchDriverRecordPointsFromDB2()
'
'	DESCRIPTION		: This function retrieves the driver Record Points for Z4AV test cases and verifies against expected driver record points
'
'	PARAMETERS		: (None)
'					
				
'					
'	DEPENDENCIES		: (None)
'
' 	RETURN VALUE(S)		:

'		gbReturnValue	:On successful Execution this retrieves driver record points from back end and verifies against expected values
'		micPass	 	:On successful execution of the function
'		micFail	 	:On unsuccessful execution of the function
'
'	ERRORS			: (None)
'
'	AUTHOR			:  Gopi chand T
'
'	ORIGINAL DATE		: 22 Oct  2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'  03-June-2009					Prashanthi Nandagiri   Added condition for running of renewal diary for PLCS source  
'
'################################################################################################################################
 
Public Function AV_FetchDriverRecordPointsFromDB2()
	Dim  Z4AV_RecordSet, intCountType, StrSql,Z4AVSql, DriSqlPart1, DriSqlPart2, rc, cAflag,flag,ExpSRPoints,ActSRPoints,IncidentCode,IncidentPoints
	Dim acciDate,Z4AVSql1,Z4AVSql2,Z4AVSql3,region, Z4AVPLCSFlag
	On Error Resume Next
	flag = False
	cAFlag = False

	rc=ReportStep(1,"Verification of Driver Record Points from DB2 for Z4AV","","")
	If gbAppRegion = "QA" Then 
		region="CGQA"
	Elseif gbAppRegion = "IST2" Then 
		region="CGIST"
	Elseif gbAppRegion = "IST1" Then
		region="CGT01"
	Elseif gbAppRegion = "RETRO2" Then
		region="CGAM"
	Elseif gbAppRegion = "FAST" Then
		region="CGFAST"
	End If
'	If gbLossDate <> "" Then
'		acciDate = Year(gbLossDate)&"-"&Month(gbLossDate)&"-"&Day(gbLossDate)
'	End If
    ' Sql for YES condition
		If gbLossNumber <> "" Then
			Z4AVSql1 ="Select Z.Z_ACC_VIOL_TYPE_CD, Z.Z_ACC_VIOL_TYPE,Z.DRIVER_DATA_SOURCE,Z_AV_SERV_SOURCE From "&region&".TZ4AV Z  WHERE"
		Else
			Z4AVSql1 ="Select Z.Z_ACC_VIOL_TYPE_CD, Z.Z_ACC_VIOL_TYPE,Z.DRIVER_DATA_SOURCE,Z_AV_SERV_SOURCE From "&region&".TZ4AV Z  WHERE Z.SEQUENCE_NUM =(SELECT MAX(Z1.SEQUENCE_NUM) FROM "&region&".TZ4AV Z1 WHERE Z.DRIVER_REFERENCE  = Z1.DRIVER_REFERENCE) AND" 
		End If
		
		Z4AVSql2 = " Z.DRIVER_REFERENCE in (SELECT W1.CLIENT_REFERENCE FROM "&region&".TW1A0 W1  WHERE W1.FIRST_NAME = '"&gbDriverFirstName&"' AND W1.LAST_NAME_COY_NAME = '"&gbDriverLastName&"' ) AND Z.POLICY_NUMBER = '"&gbPolicyNum&"'"

	    If gbLossNumber <> "" and (Ucase(gbdicAVtmpObject("InformationSource_1")) = "CLAIMS" OR Ucase(gbdicAVtmpObject("InformationSource_1")) = "PLCS") Then
			'Z4AVSql3 = " and Z.OCCURRENCE_NUMBER='"&gbLossNumber&"' AND Z.ACC_VIOL_DATE='"&acciDate&"'"
			Z4AVSql3 = " and Z.OCCURRENCE_NUMBER='"&gbLossNumber&"'"
			Z4AVSql = Z4AVSql1&Z4AVSql2&Z4AVSql3
		Else
			Z4AVSql = Z4AVSql1&Z4AVSql2
		End If
		
		If AV_Connection.State =1 Then
			AV_Connection.CommandTimeout = 900
			Set Z4AV_RecordSet = AV_Connection.Execute(Z4AVSql)
		Else
			AV_FetchDriverRecordPointsFromDB2 = micFail
			ReportStep 2,"Database Connection status "," Verification of DB2 Database connection Status", "Connection is NOT established or not in active state"
			Exit Function
		End If
	
	If  gbdicAVtmpObject("ExpectedResult_1")= VbNullString Then	  
		If  Z4AV_RecordSet.EOF Then
            ReportStep 2,"DB2 Table Record Verification","No points should be found in the Table Claims with 0 Points","No Records are found in the table"
		Else
			HandleRC micFail
			AV_FetchDriverRecordPointsFromDB2 = micFail
			ReportStep 2,"DB2 Table Record Verification","No points should be found in the Table","Records are found in the table"
			Exit Function
		End if
     ElseIf UCase(gbdicAVtmpObject("ExpectedResult_1"))="YES" Then
		 If Not Z4AV_RecordSet.EOF Then
			IncidentCode= Z4AV_RecordSet.Fields(0)
			IncidentPoints= Z4AV_RecordSet.Fields(1)
			Z4AVPLCSFlag = Z4AV_RecordSet.Fields(3)
		Else
			IncidentCode= "BLANK"
			IncidentPoints=  "BLANK"
			Z4AVPLCSFlag = "BLANK"
		 End if

		If Ucase(gbdicAVtmpObject("InformationSource_1")) = "PLCS" Then
			If  Trim(Z4AVPLCSFlag) = "PLCS" Then
				ReportStep 2,"Z_AV_SERV_SOURCE Code Verification","Z_AV_SERV_SOURCE code should be :" &"<b>"&"PLCS"&"</b>","Actual Z_AV_SERV_SOURCE value is: "&"<b>"& Z4AVPLCSFlag
			Else
				HandleRC micFail
				AV_FetchDriverRecordPointsFromDB2 = micFail
				ReportStep 2,"Z_AV_SERV_SOURCE Code Verification","Z_AV_SERV_SOURCE code should be :" &"<b>"&"PLCS"&"</b>","Actual Z_AV_SERV_SOURCE value NOT matched and Actual value: "&"<b>"& Z4AVPLCSFlag
				Exit Function
			End If
		End If

		 ' to get  equivalent code
		IncidentCode= Trim(GetIncidentCode(IncidentCode))
	   
		If (Trim(gbdicAVtmpObject("IncidentType_1"))= IncidentCode) or (Trim(gbdicAVtmpObject("IncidentType_1")) = "F/R" and IncidentCode = "VIOL") Then
			ReportStep 2,"Z_ACC_VIOL_TYPE Code Verification","Z_ACC_VIOL_TYPE code should be :" &"<b>"&gbdicAVtmpObject("IncidentType_1")&"</b>","Actual Z_ACC_VIOL_TYPE value is: "&"<b>"&IncidentCode
		Else
			HandleRC micFail
			AV_FetchDriverRecordPointsFromDB2 = micFail
			ReportStep 2,"Z_ACC_VIOL_TYPE Code Verification","Z_ACC_VIOL_TYPE code should be :" &"<b>"&gbdicAVtmpObject("IncidentType_1")&"</b>","Actual Z_ACC_VIOL_TYPE value NOT matched and Actual value: "&"<b>"&IncidentCode
			Exit Function
		End If

       If  Trim(gbdicAVtmpObject("Z_ACC_VIOL_TYPE_1"))=TRIM(IncidentPoints) Then
			ReportStep 2,"Z_ACC_VIOL_TYPE Code Verification","Z_ACC_VIOL_TYPE value should be :" &"<b>"&gbdicAVtmpObject("Z_ACC_VIOL_TYPE_1")&"</b>","Z_ACC_VIOL_TYPE code is matched and actual value: "&"<b>"&IncidentPoints
        Else
			HandleRC micFail
			AV_FetchDriverRecordPointsFromDB2 = micFail
			ReportStep 2,"Z_ACC_VIOL_TYPE Code Verification","Z_ACC_VIOL_TYPE  value should be :" &"<b>"&gbdicAVtmpObject("Z_ACC_VIOL_TYPE_1")&"</b>","Actual Z_ACC_VIOL_TYPE Points are NOT matched and actual Value: "&"<b>"&IncidentPoints
			Exit Function
		End If	
    End if
	Set Z4AV_RecordSet = Nothing
	'Call Dairy function if Source is MVR or Claims
	If gbdicAVtmpObject("InformationSource_1") = "MVR" Then
		If rc=micPass Then rc =Emulator_diaryRun(gbCurrTestCaseName,"APS",  gbAppRegion,  gbAppUserName,  gbAppUserPassword, gbPolicyNum ,"SCHEDULE;RENEWAL")
	Elseif gbdicAVtmpObject("InformationSource_1") = "PLCS" Then
		If rc=micPass Then rc =Emulator_diaryRun(gbCurrTestCaseName,"APS",  gbAppRegion,  gbAppUserName,  gbAppUserPassword, gbPolicyNum ,"RENEWAL")
	End If
    
	'Sql for getting driver record points
    DriSqlPart1 = "SELECT M.SDIP_POINTS,M.Z_SAFETY_REC_PTS FROM "&region&".TU4M2 M  WHERE M.POLICY_NUMBER='"&gbPolicyNum&"' and M.SEQUENCE_NUM=(SELECT MAX(M1.SEQUENCE_NUM) FROM "&region&".TU4M2 M1 WHERE M1.POLICY_NUMBER=M.POLICY_NUMBER"
	DriSqlPart2 = " AND M1.DRIVER_REFERENCE IN (SELECT K.CLIENT_REFERENCE FROM "&region&".TW1A0 K  WHERE K.FIRST_NAME = '"&gbDriverFirstName&"' AND K.LAST_NAME_COY_NAME ='"&gbDriverLastName&"'))"
	StrSql=DriSqlPart1 & DriSqlPart2
   
	Wait 1
	If AV_Connection.State =1 Then
		AV_Connection.CommandTimeout = 900
		Set Z4AV_RecordSet = AV_Connection.Execute(StrSql)
	Else
		 AV_FetchDriverRecordPointsFromDB2 = micFail
		ReportStep 2,"Database Connection status "," Verification of DB2 Database connection Status", "Connection is NOT established or not in active state"
		Exit Function
	End If
   'check for the records  availability 
	If Z4AV_RecordSet.EOF Then
		HandleRC micFail
		AV_FetchDriverRecordPointsFromDB2 = micFail
		ReportStep 2,"Driver Points in DB2 ","Verification of record count from TU4M2 Table " , "No records available for the condition"
		Exit Function
	End If
	
	While Not Z4AV_RecordSet.EOF
			If Instr(1,gbApplicableState,"CA")>0 Then
				If Cdbl(Z4AV_RecordSet.Fields(1)) = Cdbl(gbdicAVtmpObject("SafetyRecordPts_1")) Then
					 cAflag = True
                 End if
				 ActSRPoints=Z4AV_RecordSet.Fields(1)
			Else
				If Cdbl(Z4AV_RecordSet.Fields(0)) = Cdbl(gbdicAVtmpObject("DriverRecordPts_1")) Then
					flag = True
				End if
				ActSRPoints=Z4AV_RecordSet.Fields(0)
			End If
		Z4AV_RecordSet.Movenext
    Wend

	If cAflag = True And Instr(1,gbApplicableState,"CA")>0 Then
		AV_FetchDriverRecordPointsFromDB2 = micPass
        ReportStep 2,"Driver Points in DB2 for CA "," Verification of Safety Record Points: "&"<b>"&gbdicAVtmpObject("SafetyRecordPts_1") &"</b>"&" for Driver: "&"<b>"&gbDriverName&"</b>" , "Successfully matched with Actual points: "&"<b>"&ActSRPoints&"</b>"
        Exit Function
	Elseif Instr(1,gbApplicableState,"CA")>0 Then
		HandleRC micFail
		AV_FetchDriverRecordPointsFromDB2 = micFail
		ReportStep 2,"Driver Points in DB2 for CA "," Verification of Safety Record Points: "&"<b>"&gbdicAVtmpObject("SafetyRecordPts_1")&"</b>"&" for Driver: "&"<b>"&gbDriverName&"</b>" , "Does NOT matched with Actual points: "&"<b>"&ActSRPoints
		Exit Function
	End if
	
	If flag = True Then
		 AV_FetchDriverRecordPointsFromDB2 = micPass
		ReportStep 2,"Driver Points in DB2 other than CA "," Verification of Driver Record Points: "&"<b>"&gbdicAVtmpObject("DriverRecordPts_1")&"</b>"&" for Driver: "&"<b>"&gbDriverName&"</b>" , "Successfully matched with Actual points: "&"<b>"&ActSRPoints
	Else
		HandleRC micFail
		AV_FetchDriverRecordPointsFromDB2 = micFail
		ReportStep 2,"Driver Points in DB2 other than CA "," Verification of Driver Record Points: "&"<b>"&gbdicAVtmpObject("DriverRecordPts_1")&"</b>"&" for Driver: "&"<b>"&gbDriverName&"</b>" , "Does NOT matched with Actual points: "&"<b>"&ActSRPoints
	End If
	
End Function 

'################################################################################################################################
'	FUNCTION NAME		: GetIncidentCode(ByVal IncidentCode)
'
'	DESCRIPTION			: GetIncidentCode converts back end Incident code into equivalent testware code 	
'	PARAMETERS			: (IncidentCode)
'					 IncidentCode :  BackEnd incident code
'	DEPENDENCIES		: (None)
'   
' 	RETURN VALUE(S): 
'      '
'	ERRORS				: (None)
'
'	AUTHOR			 Venkat
'
'	ORIGINAL DATE		:  24th Oct 08
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'
''
'################################################################################################################################

Public  Function GetIncidentCode(ByVal IncidentCode)
   On Error Resume Next
	   Select Case IncidentCode
			Case "A" 	IncidentCode="ACCI"
			Case "V" 	IncidentCode="VIOL"
			Case "D" 	IncidentCode="DISM"
			Case "S" 	IncidentCode="SUSP"
			'Case "FR" 	IncidentCode="F/R"
		End Select
		GetIncidentCode=IncidentCode
 End Function

'################################################################################################################################
'	FUNCTION NAME			: AV_ReleasePolicies()
'
'	DESCRIPTION				: This procedure is used to release the reserved policies
'
'   PARAMETERS				: (None)

'	DEPENDENCIES			: (None)
'   
' 	RETURN VALUE(S): 
'		micPass	 			: On successful execution of the function
'		micFail	 			: On unsuccessful execution of the function

'	ERRORS					: (None)
'
'	AUTHOR					: Prashanthi Nandagiri
'
'	ORIGINAL DATE			: 23 Oct 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'
'
'################################################################################################################################
Public Function AV_ReleasePolicies()		
	Dim rc, TestCaseNumber, TestCaseName, Navigate

	On Error Resume Next

	'Close Browsers
	CloseBrowsers

	'Initialize TDM related variables
	InitializeTDMVariables	
	gbCurrTestCaseName = "Release Policies"
	gbCurrTestCaseDesc = vbNullString

	'Create HTML report for TDM
	StartTDMReport "Release Policy"

   'Open & Login to TDM
	'ReportStep 1, "Login to TDM", "", ""
	rc = SetupTDM("Release Reserved Policy")
	If rc <> micPass Then
		HandleRC rc
		AV_ReleasePolicies = micFail
		EndTDMReport
		Exit Function
	End If

	'Wait for the page to load
	rc = WaitforObject(pgTestDataManagement.WebButton("Retrieve"))

	'Release polices
	ReportStep 1, "Release Polices", "", ""
	Do While True
		'Click on Clear Button
		If rc = micPass Then rc = ObjectButton(pgTestDataManagement, "Clear", "Click")

		'Select the region
		If rc = micPass Then rc = ObjectList(pgTestDataManagement, "Region", "SelectValue", "", "", "",  gbAppRegion)

		'Select the Project name
		If rc = micPass  Then rc = 	ObjectList(pgTestDataManagement, "Project Name", "SelectValue", "", "", "", gbTDMProjectName)

		'Click Retrieve button
		If rc = micPass Then rc = ObjectButton(pgTestDataManagement, "Retrieve", "Click")

		'Wait for the page to load
		rc = WaitForObject(pgTestDataManagement.WebButton("Clear"))

		'Error handling
		If rc <> micPass Then
			HandleRC rc
			AV_ReleasePolicies = rc
			ReportStep 2, "Retrieve Reserved Policies", "Retrieve all the policies reserved by the user" , "Unable to retrieve the reserved policies"
			EndTDMReport
			Exit Function
		End If

  	'Release all policies
		'If multiple pages does not exists, exit the loop
		PolicyNumber = Trim(pgTestDataManagement.WebTable("Reserve").GetCellData(3,2))
		If PolicyNumber = vbNullString Then Exit Do
			
		'Handle system message
		SystemMessage = pgTestDataManagement.WebTable("System Message").GetCellData(1,2)
		If Trim(SystemMessage) <> vbNullString Then
			HandleRC micFail
			AV_ReleasePolicies = micFail
			ReportStep 2, "Retrieve Reserved Policies", "Retrieve all the policies reserved by the user" , "Unable to retrieve the reserved policies. System Message:<BR>" & SystemMessage
			EndTDMReport
			Exit Function
		End If

		'Select all the listed policies
		rc = ObjectChkBox (pgTestDataManagement, "Select All", "SelectValue", "", "", "",  "ON")

		'Release the polcies
		If rc = micPass Then rc = ObjectButton(pgTestDataManagement, "Release", "Click")

		'Wait for the page to load
		rc = WaitForObject(pgTestDataManagement.WebButton("Clear"))

		'Handle system message
		SystemMessage = pgTestDataManagement.WebTable("System Message").GetCellData(1,2)
		If Trim(SystemMessage) = vbNullString Then SystemMessage = "Timed out, the page not loaded"
		If Trim(SystemMessage) <> "Policie(s) Released" Then
			HandleRC micFail
			AV_ReleasePolicies = micFail
			ReportStep 2, "Release Reserved Policies", "Release all the policies reserved by the user" , "Unable to release the reserved policies. System Message:<BR>" & SystemMessage
			EndTDMReport
			Exit Function
		End If
	Loop

	'Log out from TDM
	If rc = micPass Then rc = TDMLogout()
	'Error handling
	If rc <> micPass Then
		HandleRC micFail
		ReportStep 2, "Release policies", "Policies should be successfully released", "Unable to release the reserved policies"
		AV_ReleasePolicies = micFail
	Else
		AV_ReleasePolicies = micPass
		ReportStep 2, "Release policies", "Policies should be successfully released", "Policies are released successfully"
		CloseBrowsers
	End If

	'Close HTML Report for TDM
	EndTDMReport
End Function

'################################################################################################################################
'	FUNCTION NAME		: CloseDB2Database()
'
'	DESCRIPTION			: Close DB2 data base connection and release any locking.
'		
'	PARAMETERS			: (None)
'					
'	DEPENDENCIES		: (None)
'   
' 	RETURN VALUE(S): 
'		micPass	 		: On successful execution of the function
'		micFail	 		: On unsuccessful execution of the function
'
'	ERRORS				: (None)
'
'	AUTHOR				 Gopi chand T
'
'	ORIGINAL DATE		:  23rd Oct 08
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'
'
'
'################################################################################################################################
Public Function CloseDB2Database()
    On Error Resume Next
    'Close Data base connection
    AV_Connection.Close
    
    Set AV_Connection = Nothing
    
    'Error handling
    If Err.Number <> micPass Then
        ReportMessage micWarning, "Close DB2 Database", "Error while closing the test database. " & Err.Description
        Err.Clear
        CloseDB2Database = micFail
    Else
		CloseDB2Database = micPass
	End If
End Function
'################################################################################################################################
'	FUNCTION NAME		: AV_ValidateAddUpdateDriverInfo(ByVal DriverTableName, ByVal DriverRowID, ByVal LicenseTableName, ByVal LicenseRowID, ByVal AddressTableName, ByVal AddressRowID)
'
'	DESCRIPTION			: This function will add or update all Driver details on Add Update Driver page.
'		
'   PARAMETERS			:
'		DriverTableName	: Table name containing the PersonalInfo
'		DriverRowID		: Unique value, representing the row containing the test data
'		LicenseTableName: Table name containing the LicenseInfo
'		LicenseRowID	: Unique value, representing the row containing the test data
'		AddressTableName: Table name containing the AddressInfo
'		AddressRowID	: Unique value, representing the row containing the test data
'					
'	DEPENDENCIES		: (None)
'
'    
' 	RETURN VALUE(S): 
'		micPass	 		: On successful execution of the function
'		micFail	 		: On unsuccessful execution of the function
'
'	ERRORS				: (None)
'
'	AUTHOR				: Prashanthi Nandagiri
'
'	ORIGINAL DATE		: Oct 29 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------

'################################################################################################################################
Public Function AV_ValidateAddUpdateDriverInfo(ByVal DriverTableName, ByVal DriverRowID, ByVal LicenseTableName, ByVal LicenseRowID, ByVal AddressTableName, ByVal AddressRowID)
Dim rc,dicUDR
	
	On Error Resume Next
	
	'Wait for the Screen object to load
	rc = WaitForObject(frAddUpdateDriver.WebButton("OK"))
	
	'Error handling
	If rc <> micPass Then
		HandleRC rc
	   AV_ ValidateAddUpdateDriverInfo = rc
		ReportStep 2, "ValidateAddUpdateDriverInfo", "Add/Update Driver details", "Add/Update Driver Screen not loaded"
		Exit Function
	End If
	
	If DriverTableName <> vbNullString Then
		'Select Title
		If rc=micPass Then rc=ObjectList (frAddUpdateDriver, "Title", "SelectValue", DriverTableName, DriverRowID, "Title","")
		
		'Select Relation to Insured
		If rc=micPass Then rc=ObjectList (frAddUpdateDriver, "Rel to Insured", "SelectValue", DriverTableName, DriverRowID, "Relation","")
		
		'Enter GD Terms
		If rc = micPass Then
			If  frAddUpdateDriver.WebEdit("GD Terms").Exist(3) Then rc = ObjectEdit (frAddUpdateDriver, "GD Terms", "EnterValue", DriverTableName, DriverRowID,"GDTerms", "")
		End If
	End If
 If LicenseTableName =  vbNullString Then
	'Select UDR checkbox for NY state
	If gbAbbreviatedStateCode="NY" and frAddUpdateDriver.WebCheckBox("UDR").Exist(gbObjectSyncTime) then
		If rc=micPass then rc=ObjectChkbox(frAddUpdateDriver, "UDR","SelectValue","","","","ON")
	End If
End if
	If LicenseTableName <> vbNullString Then
		'Enter first licensed date
		If rc=micPass Then rc=ObjectEdit (frAddUpdateDriver, "Date First Licensed", "EnterDate", LicenseTableName, LicenseRowID, "FirstLicensed", "")
		
		'Enter Date Licensed in US/Canada 
		If  frAddUpdateDriver.WebEdit("Date Licensed in US/Canada").Exist (3) And rc = micPass  Then
			If CStr(frAddUpdateDriver.WebEdit("Date Licensed in US/Canada").GetROProperty("disabled"))  = "0" Then
				rc  = ObjectEdit (frAddUpdateDriver, "Date Licensed in US/Canada", "EnterDate", LicenseTableName, LicenseRowID, "LicensedInUS", "")
			End If	
		End If
	End If
     ' Click on UDR Checkbox   
 If LicenseTableName <> vbNullString Then	 
	Set dicUDR = Createobject("Scripting.Dictionary")
	if rc = micpass then  rc= RetrieveRecordset(DriverTableName,DriverRowID,dicUDR)
	If  frAddUpdateDriver.WebCheckBox("UDR").Exist(gbObjectSyncTime)  and dicUDR("UDR") <> vbnullstring Then
	   if rc = micpass Then   rc = ObjectChkbox ( frAddUpdateDriver, "UDR", "SelectValue", DriverTableName,DriverRowID,"UDR", "")
	End If
	Set dicUDR = nothing
End if 	
	If AddressTableName <> vbNullString Then
		'Enter Street Number
		If rc=micPass Then rc=ObjectEdit (frAddUpdateDriver, "Street Number", "EnterValue", AddressTableName, AddressRowID, "StreetNumber", "")
		
		'Enter Street Name 
		If rc=micPass Then rc=ObjectEdit (frAddUpdateDriver, "Street Name", "EnterValue", AddressTableName, AddressRowID, "StreetName", "")
		
		'Select Apartment type
		If rc=micPass Then rc=ObjectList (frAddUpdateDriver, "UnitType", "SelectValue", AddressTableName, AddressRowID, "Unit Type","")
		
		'Enter Apartment Number
		If rc=micPass Then rc=ObjectEdit (frAddUpdateDriver, "Apt Number", "EnterValue", AddressTableName, AddressRowID, "Apt#", "")
		
		'Enter P.O.BOX number
		If rc=micPass Then rc=ObjectEdit (frAddUpdateDriver, "POBox", "EnterValue", AddressTableName, AddressRowID, "POBox", "")
		
		'Enter City
		If rc=micPass Then rc=ObjectEdit (frAddUpdateDriver, "City", "EnterValue", AddressTableName, AddressRowID, "City", "")
		
		'Select State
		If rc=micPass Then rc=ObjectList (frAddUpdateDriver, "State", "SelectValue", AddressTableName, AddressRowID, "State","")
		
		'Enter Zip
		If rc=micPass Then rc=ObjectEdit (frAddUpdateDriver, "Zip Code", "EnterValue", AddressTableName, AddressRowID, "ZipCode", "")
	End If
	
	'Click on the OK button 
	If rc=micPass Then rc=ObjectButton(frAddUpdateDriver, "OK", "Click")
	
	'Static wait is required
	Wait gbWebPageSyncTime
	
	'To handle Optional IE popup 
	HandleRepViewPopup "Optional","OK"
	If InStr(gbPopupMessageText, "Address was validated by the U.S. Postal Service and corrected")>0 Then
		'Click on ok button in add scree, for second time, if the pop-up has appeared
		If rc=micPass Then rc=ObjectButton (frAddUpdateDriver, "OK", "Click")
	ElseIf	InStr(gbPopupMessageText, "Unit Type")>0 Then
		If rc=micPass Then rc=ObjectButton (frAddUpdateDriver, "OK", "Click")
        End If
	'To handle Optional IE popup 
	HandleRepViewPopup "Optional", "OK"
	If InStr(gbPopupMessageText, "Driver License Details missing") > 0 Then
		'do nothing
	ElseIf gbPopupMessageText <> "BLANK" Then
	   ' rc =  micFail
	 Elseif InStr(gbPopupMessageText, "UNDERWRITING RESULTS") > 0   Then
		'donothing
    End If
        
        'Error handling
	If rc <> micPass Then
		HandleRc rc
		ReportStep 2, "ValidateAddUpdateDriverInfo", "Add/Update required driver info" , "Unable to update the driver information"
	Else
		ReportStep 2, "ValidateAddUpdateDriverInfo", "Add/Update required driver info" , "Driver information updated"
	End If

	AV_ValidateAddUpdateDriverInfo = rc
End Function
'################################################################################################################################
'	FUNCTION NAME		: AV_DriVehAssignment()
'
'	DESCRIPTION			: This function assigns the drivers to the vehicle as a pricipal driver / Unrated pricipals
'
'	PARAMETERS			: 
'		dicAddDriver					:	 Dictionary Object which contains all the attribu
'					
'
'	DEPENDENCIES		: (None)
'
' 	RETURN VALUE(S): 
'		micPass	 		: On successful execution of the function
'		micFail	 		: On unsuccessful execution of the function
'
'	ERRORS				: (None)
'
'	AUTHOR				:  Prashanthi Nandagiri
'
'	ORIGINAL DATE		: Oct30 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY			:	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
' 
' 
' 
'
'################################################################################################################################
Public Function AV_DriVehAssignment()
	Dim rc, VehRowCnt, VehCnt, DrRowCnt, DriCnt, AssignedDrivers, TblRowStart, Flag, DrvLstCnt, DrvArr, DrvVal, LstOfDrivers,Cnt,DrivName, VehCnt1

	On Error Resume Next
	
	TblRowStart =2

	'DrRowCnt = frDriverPage.WebTable("Driver Number").RowCount

	If rc=micPass Then rc = SelectRepviewTab("PolicyQuoteSummary Tabs",  "Vehicle")
	If rc=micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"Vehicle Page","")
	If rc=micPass Then rc = WaitForObject(frVehiclePage.WebTable("Number"))

	  VehRowCnt = frVehiclePage.WebTable("Number").RowCount

	'VehRowCnt = Browser("Browser Unified Desktop").Page("Chordiant Unified Desktop").Frame("Vehicle Page").WebTable("Number").RowCount

	For VehCnt =2 to VehRowCnt
		If frVehiclePage.WebTable("Number").GetCellData(VehCnt,7) = "" Then
			If rc=micPass Then rc= SelectRow(frVehiclePage,"Number","","","",VehCnt-1)
			If rc=micPass Then rc = SelectTask("Vehicle Page","Update Vehicle")
			If rc=micPass Then rc= WaitForWindow(gbBrowserName,gbApplicationHomePage,"Update Vehicle","")
			If rc=micPass Then rc=	WaitForObject(frUpdateVehicle.WebButton("OK"))

			If rc = micPass Then rc= SearchWebTableRow(frUpdateVehicle.WebTable("DriverList"), "1" , gbDriverName, "No",True)
			'If rc = micPass Then rc= SelectRow(frUpdateVehicle,"Driver","","","",gbReturnValue-1)
			If rc = micPass Then frUpdateVehicle.WebTable("DriverList").ChildItem(gbReturnValue,2,"WebList",0).Select "Principal"
			If rc=micPass Then rc=	WaitForObject(frUpdateVehicle.WebButton("OK"))
			If rc = micPass Then rc = ObjectButton(frUpdateVehicle,"OK", "Click")
			If rc = micPass Then  rc = HandleRepViewPopup("Optional", "OK")	
			Exit For
		End If
	Next


	If rc=micPass Then rc = SelectRepviewTab("PolicyQuoteSummary Tabs",  "Driver")
	If rc=micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"DriverPage","")
	If rc=micPass Then rc = WaitForObject(frDriverPage.WebElement("Add New Driver"))

	AV_DriVehAssignment = rc
End Function
'################################################################################################################################
'	FUNCTION NAME		: AV_ComplexScenarioAmendments(ByVal TestcaseCount)
'
'	DESCRIPTION			: 
'
'	PARAMETERS			: (None)
'			
'	DEPENDENCIES		: (None)
'    
' 	RETURN VALUE(S)		: (None)
'
'	ERRORS				: (None)
'
'	AUTHOR				: Prashanthi Nandagiri
'
'	ORIGINAL DATE		: NOV 04 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'	
'
'################################################################################################################################
Public Function AV_ComplexScenarioAmendments()
 Dim TestCaseIteration, EffectiveDateOption, SheetName, TestCaseCount, ErrorFlag, arrVar
 On Error Resume Next
 
 TestCaseCount  = Datatable.GetSheet(gbTestLabName).GetRowCount
 For TestCaseIteration =1 To TestCaseCount
  ErrorFlag=False
  ErrorMessage="Unable to execute test case."
  Err.Clear
  
  gbTestCaseStatus=micPass
  
  'Get test case details
  Datatable.GetSheet(gbTestLabName).SetCurrentRow TestCaseIteration
  gbCurrTestCaseName = Datatable.Value("TestCaseID", gbTestLabName)
  'Verify test case is present 
  If Ltrim(rtrim(gbCurrTestCaseName)) = vbNullString Then Exit For
 
  gbCurrTestCaseDesc = vbNullString
  gbCurrTestCaseDesc = gbCurrTestCaseDesc & "<BR><b>" & Trim(Datatable.Value("TestCaseDescription", gbTestLabName))
  gbTestCaseType =  Trim(Datatable.GetSheet(gbTestLabName).GetParameter("TestCaseType"))
  gbPolicyNum = Trim(Datatable.GetSheet(gbTestLabName).GetParameter("PolicyNo").Value)
  gbDriverName = Trim(Datatable.GetSheet(gbTestLabName).GetParameter("DriverFullName").Value)

  arrVar=Split(gbDriverName,";")
	If Ubound(arrVar) = 1 Then
		gbDriverFirstName = arrVar(0)
		gbDriverLastName = arrVar(1)
		gbDriverName = gbDriverFirstName&" "&gbDriverLastName
	End If
  gbMVRLastName = Trim(Datatable.GetSheet(gbTestLabName).GetParameter("MVRDriverLastName").Value)
  gbLicenseNumber = Trim(Datatable.GetSheet(gbTestLabName).GetParameter("LicenseNumber").Value)
  gbApplicableState = Trim(Datatable.GetSheet(gbTestLabName).GetParameter("State").Value)
  If instr(gbApplicableState,"NJ")>0 Then
			gbAbbreviatedStateCode = "NJ"
  Else
	gbAbbreviatedStateCode = gbApplicableState
  End If
  EffectiveDateOption = "Any Date"
 
  If  gbPolicyNum <> VBNullString Then
   'Condition to check which functionality sheet needs to be selected
   If InStr(1,gbCurrTestCaseName,"FG") > 0  Then
    SheetName = "Forgiveness"
	ElseIf InStr(1,gbCurrTestCaseName,"DUP") > 0  Then
		SheetName = "PLCS Dup Same Day Test Data"
	ElseIf InStr(1,gbCurrTestCaseName,"DIFF") > 0  Then
		SheetName = "PLCS Dup Diff Day Test Data"
   ElseIf InStr(1,gbCurrTestCaseName,"PLCS") > 0  Then
    SheetName = "PLCS"
   ElseIf InStr(1,gbCurrTestCaseName,"Z4AV") > 0  Then
    SheetName = "Z4AV"
   Else
    SheetName = "Rating Hierarchy"
   End If
   
   If gbTestCaseType = "Amendment" Then
 
    Datatable.GetSheet(SheetName).SetCurrentRow AV_GetTestScriptRow(SheetName)
    'Error handling
    If Err.Number <> micPass Then
     ErrorFlag=TRUE
     CloseBrowsers
     StartTestCaseReport
     HandleRC micFail
                    ReportStep 1, "Testware Issue", "Test case details should present in "&SheetName&" sheet of TestWare", " Test case details missing in "&SheetName&" sheet of TestWare"
     AV_ComplexScenarioAmendments = micFail
     EndTestCaseReport
     'Exit Function
    End If
 
    If  ErrorFlag <> TRUE Then
 
     'Close browsers
     CloseBrowsers
  
     'Start Test case report
     StartTestCaseReport
 
     rc = AV_SetupRepView()
     If rc = micPass Then rc = AV_NavigateToAmendments((EffectiveDateOption))
 
     If rc = micPass Then rc = AV_Ammendments(SheetName)
     If rc=micPass Then rc = SelectRepviewTab("PolicyQuoteSummary Tabs",  "Policy")
     If rc=micPass Then rc = WaitForWindow(gbBrowserName,gbApplicationHomePage,"PolicyQuoteSummary Tabs","")
  
     If rc=micPass Then rc =AcceptTransaction(frPolicyAmendment,"Cancel","")
     'Logout of the application
     ReportStep 1,"End the session","",""
     If rc=micPass Then rc = AV_EndSession()
     EndTestCaseReport
    End If
    End If
  Else
     CloseBrowsers
   StartTestCaseReport
   HandleRC micFail
   ReportStep 1, gbCurrTestCaseName, "Policy should fetch for the testcase ID", "Policy didnot fetch for testcaseID:" & gbCurrTestCaseName
   EndTestCaseReport
  End If
 
 Next   
 
AV_ComplexScenarioAmendments = rc
 
End Function
'################################################################################################################################
'	FUNCTION NAME		: AV_SetEnvirnomentValues()
'
'	DESCRIPTION			: This procedure is used to set the environment variable values before the script runs (User Name, Applicable state, Region).
'
'	PARAMETERS			: (None)
'					
'	DEPENDENCIES		: (None)
'
' 	RETURN VALUE(S)		:  NONE
'
'	ERRORS				: (None)
'
'	AUTHOR				: Prashanthi Nandagiri
'
'	ORIGINAL DATE		: 06 Nov 2008
'-----------------------------------------------------------------------------------------------------------------------
'			R E V I S I O N    H I S T O R Y
'-----------------------------------------------------------------------------------------------------------------------
'	REVISED DATE	: 	REVISED BY	 :	CHANGE DESCRIPTION
'-----------------------------------------------------------------------------------------------------------------------
'
'
'################################################################################################################################
Public Function AV_SetEnvirnomentValues()
    Dim UserInputPage, UserSelection, IE, loopCounter, InputField, ValidationFailed
    Dim FieldValidationString, FieldIndexString, FieldValueString, CurrentElement
    Dim rc, ValidationErrorMessage, dicEnvironmentValues, Flag

    On Error Resume Next

    UserInputPage = gbDriverScriptPath & "Testware\EnviromentSettings_" & gbApplicationName & ".htm"
    Set dicEnvironmentValues = CreateObject("Scripting.Dictionary")
    
    Set IE = CreateObject("InternetExplorer.Application")
    IE.Navigate UserInputPage
    For loopCounter = 1 To 5
		Wait 1
		If IE.ReadyState = 4 Then Exit For
    Next
    IE.Fullscreen = False
    IE.Toolbar = False
    IE.Addressbar = False
    IE.StatusBar = False
    IE.Width = 450
    IE.Height = 420
    IE.Left = 350
    IE.Top = 250
    IE.Resizable = False
    IE.Document.Title = "Set Environment Variables"
	IE.Document.All("btnUserAccepted").Disabled=False
    IE.Document.All("SimpleScenario").Disabled=TRUE
	IE.Document.All("ComplexScenario").Disabled=TRUE
    IE.Visible = True

	'msgbox IE.Document.All("ApplicableScript").Value
    
    'Wait is required. If IE takes time to load, this will prevent program from aborting
    Wait 5

    Flag = False
    Do While True
		If InStr(IE.LocationURL, "&btnUserCancelled") > 0 Then
			IE.Visible = False
            UserSelection = MsgBox("You have clicked 'Cancel' button. Execution will be terminated." & vbCrLf & "Do you want to exit?", vbYesNo+vbInformation, gbApplicationName)
            If UserSelection = vbYes Then
                AV_SetEnvirnomentValues = micFail
                IE.Quit
                Set IE = Nothing
                Exit Function
            Else
                IE.Navigate UserInputPage
				For loopCounter = 1 To 5
					Wait 1
					If IE.ReadyState = 4 Then Exit For
				Next
				Wait 1
                IE.Document.Title = "Set Environment Variables"
                IE.Visible = True
            End If
        ElseIf InStr(IE.Document.Title, "Form has been submitted") > 0 Then
            ParseParametersFromURL IE.LocationURL, dicEnvironmentValues
            ValidationFailed = False
            For Each CurrentElement In dicEnvironmentValues.Keys
                If CurrentElement <> "btnUserAccepted" Then
                    FieldValidationString = vbNullString
                    FieldValidationString = UCase(IE.Document.All(CurrentElement).ValidationRule)

                    FieldValueString = vbNullString
                    FieldValueString = dicEnvironmentValues(CurrentElement)
                    
                    If Err.Number <> micPass Then Err.Clear
                    
                    If FieldValidationString = "DATE" Then
                        If Not IsDate(FieldValueString) Then
                            ValidationFailed = True
                            ValidationErrorMessage = CurrentElement & " requires a valid date to be entered"
                            Exit For
                        End If
                    ElseIf FieldValidationString = "NUMBER" Then
                        If Not IsNumeric(FieldValueString) Then
                            ValidationFailed = True
                            ValidationErrorMessage = CurrentElement & " requires a valid number to be entered"
                            Exit For
                        End If
                    End If
                End If
                
                Environment.Value(CurrentElement) = dicEnvironmentValues(CurrentElement)
            Next
            
            If ValidationFailed = False Then
                Exit Do
            Else
				IE.Visible = False
                MsgBox ValidationErrorMessage, vbExclamation, gbApplicationName
                ValidationErrorMessage = vbNullString
                IE.Navigate UserInputPage
                IE.Document.Title = "Set Environment Variables"
                IE.Visible = True
                For Each CurrentElement In dicEnvironmentValues.Keys
                    If CurrentElement <> "btnUserAccepted" Then
                        IE.Document.All(CurrentElement).Value = dicEnvironmentValues(CurrentElement)
                    End If
                Next
            End If
        End If

		If IE.Document.All("ApplicableScript").Value = "Simple Scenarios" Then
			IE.Document.All("SimpleScenario").Disabled=False
			IE.Document.All("ComplexScenario").Disabled=TRUE
		Elseif IE.Document.All("ApplicableScript").Value = "Complex Scenarios" Then
			IE.Document.All("ComplexScenario").Disabled=False
			IE.Document.All("SimpleScenario").Disabled=TRUE
		End If
		
        For loopCounter = 1 To 5
			If IE.ReadyState = 4 Then
				If InStr(IE.Document.Title, "Set Environment Variables") = 0 Then
					Exit For
				End If
			End If

		If IE.Document.All("ApplicableScript").Value = "Simple Scenarios" Then
			IE.Document.All("SimpleScenario").Disabled=False
			IE.Document.All("ComplexScenario").Disabled=TRUE
		Elseif IE.Document.All("ApplicableScript").Value = "Complex Scenarios" Then
			IE.Document.All("ComplexScenario").Disabled=False
			IE.Document.All("SimpleScenario").Disabled=TRUE
		End If
'		
			Wait 2
'
		If IE.Document.All("ApplicableScript").Value = "Simple Scenarios" Then
			IE.Document.All("SimpleScenario").Disabled=False
			IE.Document.All("ComplexScenario").Disabled=TRUE
		Elseif IE.Document.All("ApplicableScript").Value = "Complex Scenarios" Then
			IE.Document.All("ComplexScenario").Disabled=False
			IE.Document.All("SimpleScenario").Disabled=TRUE
		End If

	If Flag =  False Then
		Do While True
			If IE.Document.All("ApplicableScript").Value = "Simple Scenarios" Then
				IE.Document.All("SimpleScenario").Disabled=False
				IE.Document.All("ComplexScenario").Disabled=TRUE
				Flag = true
				Exit Do
			Elseif IE.Document.All("ApplicableScript").Value = "Complex Scenarios" Then
				IE.Document.All("ComplexScenario").Disabled=False
				IE.Document.All("SimpleScenario").Disabled=TRUE
				Flag = true
				Exit Do
			End If
		Loop
	End if
	
			If Err.Number <> micPass Then
				AV_SetEnvirnomentValues = micFail
				IE.Quit
				Set IE = Nothing
				Msgbox "Not able to capture environment settings. Execution terminated", vbExclamation, gbApplicationName
				Exit Function
			End If
		Next
    Loop

    IE.Quit
    Set IE = Nothing
    AV_SetEnvirnomentValues = micPass
End Function


'################################################################################################################
'	FUNCTION NAME		: AV_VerifySourcePointsFromDB2(ByVal Cnt,ByVal PLCSFlag)
'
'	DESCRIPTION		: This function fetches the Source points from the database and compares the same Expected Values.
'
'	PARAMETERS		: Source number in the testware
'				  
'				  
				
'					
'	DEPENDENCIES		: (None)
'
' 	RETURN VALUE(S)		:

'		
'		micPass	 	:On successful execution of the function
'		micFail	 	:On unsuccessful execution of the function
'
'	ERRORS			: (None)
'
'	AUTHOR			: Gopi Chand Tadiboyina
'
'	ORIGINAL DATE		: Nov 5 2008

'################################################################################################################

Public Function AV_VerifySourcePointsFromDB2(ByVal Cnt,ByVal PLCSFlag)

	Dim objRecordSet, StrSql, rc,StrSql1,StrSql2,StrSql3,region,accViolType,lastName,StrSql4
	On Error Resume Next
	'verifies DB2 database connection is active.
   If AV_Connection.State <> 1 Then
		AV_VerifySourcePointsFromDB2 = micFail
		ReportStep 2, "DB2 Connection", "Connect to DB2 ", "Unable to Connect to DB2"
		Exit Function
	End If
    If gbAppRegion = "QA" Then 
		region="CGQA"
	Elseif gbAppRegion = "IST2" Then 
		region="CGIST"
	Elseif gbAppRegion = "IST1" Then
		region="CGT01"
	Elseif gbAppRegion = "RETRO2" Then
		region="CGAM"
	Elseif gbAppRegion = "FAST" Then
		region="CGFAST"
	End If
	
	If gbdicAVtmpObject("IncidentType_"&Cnt) = "ACCI" Then
		accViolType = "A"
	Elseif gbdicAVtmpObject("IncidentType_"&Cnt) = "VIOL" Then
		accViolType = "V"
	Elseif gbdicAVtmpObject("IncidentType_"&Cnt) = "DISM" Then
		accViolType = "D"
	Elseif gbdicAVtmpObject("IncidentType_"&Cnt) = "SUSP" Then
		accViolType = "S"
	End If
	If  gbMVRLastName <> "" Then
		lastName = gbMVRLastName
	Else
		lastName = gbDriverLastName
	End If
	
	StrSql1 = "select Z.DRIVER_DATA_SOURCE,z.ACC_VIOL_DATE,z.CONVICTION_DATE,z.SDIP_POINTS,z.Z_AV_SERV_SOURCE from "&region&".TZ4AV z where z.policy_number= " & "'" &gbPolicyNum& "'" & " AND  Z.DRIVER_REFERENCE IN (SELECT W.CLIENT_REFERENCE FROM "&region&".TW1A0 W  WHERE LTrim(Rtrim(W.FIRST_NAME)) ='"&gbDriverFirstName&"' AND Ltrim(Rtrim(W.LAST_NAME_COY_NAME))='"&lastName&"')"
	 If gbClaimsLossNumber <> "" and Ucase(gbdicAVtmpObject("InformationSource_"&Cnt)) = "CLAIMS" Then
		StrSql4 = " and z.OCCURRENCE_NUMBER='"&gbClaimsLossNumber&"'"
	Elseif  gbPLCSLossNumber <> "" and Ucase(gbdicAVtmpObject("InformationSource_"&Cnt)) = "PLCS" Then
		StrSql4 = " and z.OCCURRENCE_NUMBER='"&gbPLCSLossNumber&"'"
	Elseif Ucase(gbdicAVtmpObject("InformationSource_"&Cnt)) = "CLAIMS" or UCase(gbdicAVtmpObject("InformationSource_"&Cnt)) = "PLCS" Then
		StrSql4 = " and z.OCCURRENCE_NUMBER='"&gbLossNumber&"'"
	End If
	StrSql2= " and z.Z_TERM_RATING_DATE=(select max(z1.Z_TERM_RATING_DATE) from "&region&".TZ4AV z1 where  Z1.OCCURRENCE_NUMBER =Z.OCCURRENCE_NUMBER and z.policy_number=z1.policy_number)"
	'StrSql3= " And z.SEQUENCE_NUM = (select max(z2.SEQUENCE_NUM) from "&region&".TZ4AV z2 where  Z2.OCCURRENCE_NUMBER =Z.OCCURRENCE_NUMBER and z.policy_number=z2.policy_number AND z2.Z_ACC_VIOL_TYPE_CD = '"&accViolType&"')"
	StrSql3= " And z.SEQUENCE_NUM = (select max(z2.SEQUENCE_NUM) from "&region&".TZ4AV z2 where  Z2.OCCURRENCE_NUMBER =Z.OCCURRENCE_NUMBER and z.policy_number=z2.policy_number)"
	
'	If gbClaimsLossNumber <> "" and Ucase(gbdicAVtmpObject("InformationSource_"&Cnt)) = "CLAIMS" Then
'		StrSql4 = " and z.OCCURRENCE_NUMBER='"&gbClaimsLossNumber&"'"
'	Elseif  gbPLCSLossNumber <> "" and Ucase(gbdicAVtmpObject("InformationSource_"&Cnt)) = "PLCS" Then
'		StrSql4 = " and z.OCCURRENCE_NUMBER='"&gbPLCSLossNumber&"'"
'	Elseif Ucase(gbdicAVtmpObject("InformationSource_"&Cnt)) = "CLAIMS" or UCase(gbdicAVtmpObject("InformationSource_"&Cnt)) = "PLCS" Then
'		StrSql4 = " and z.OCCURRENCE_NUMBER='"&gbLossNumber&"'"
'	End If

	If Ucase(gbdicAVtmpObject("InformationSource_"&Cnt)) = "PLCS" or Ucase(gbdicAVtmpObject("InformationSource_"&Cnt)) = "CLAIMS" Then
		StrSql = StrSql1&""&StrSql4&""&StrSql2&""&StrSql3
	Else
		StrSql = StrSql1&""&StrSql2&""&StrSql3
	End If
	'msgbox StrSql
	 AV_Connection.CommandTimeout = 900
	'this will executes the sql query
	Set objRecordSet = AV_Connection.Execute(StrSql)
	
	If Not objRecordSet.EOF Then
		If UCASE(Trim(gbdicAVtmpObject("InformationSource_"&Cnt))) = "PLCS" Then
			If (UCASE(Trim(objRecordSet.Fields(4))) = "PLCS") AND (PLCSFlag = "VerifyPLCSFlag") Then
				gbReturnValue = True
				AV_VerifySourcePointsFromDB2 = micPass
				Exit Function
			Elseif PLCSFlag = "VerifyPLCSFlag" Then
				gbReturnValue = False
				AV_VerifySourcePointsFromDB2 = micFail
				Exit Function
			End if
		End If
		If UCASE(Trim(objRecordSet.Fields(0))) = UCASE(Trim(gbdicAVtmpObject("InformationSource_"&Cnt))) OR UCASE(Trim(objRecordSet.Fields(0))) = "CLAIMS" Then
			If CInt(Trim(objRecordSet.Fields(3))) =  CInt(Trim(gbdicAVtmpObject("Points_"&Cnt))) Then
				AV_VerifySourcePointsFromDB2 = micPass
				gbReturnValue = objRecordSet.Fields(3)
			Else
				AV_VerifySourcePointsFromDB2 = micFail
			End If
		End If
'	Else
'		ReportStep 2, "Verify Source Points From DB2", ""&gbdicAVtmpObject("InformationSource_"&Cnt)&" source availability in the backend", "This souce is not available in the TZ4AV table"  
'		AV_VerifySourcePointsFromDB2 =micFail
	End if
End Function


